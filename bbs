 IEEE-standard or PDP-series machines) but which break down badly when
exposed to a Cray's unique `rounding' rules. :crayola: /kray-oh'l*/ n. A
super-mini or -micro computer that provides some reasonable percentage of
supercomputer performance for an unreasonably low price. Might also be a
{killer micro}. :crayola books: n. The {rainbow series} of National Computer
Security Center (NCSC) computer security standards (see {Orange Book}).
Usage: humorous and/or disparaging. :crayon: n. 1. Someone who works on Cray
supercomputers. More specifically, it implies a programmer, probably of the
CDC ilk, probably male, and almost certainly wearing a tie (irrespective of
gender). Systems types who have a Unix background tend not to be described as
crayons. 2. A {computron} (sense 2) that participates only in
{number-crunching}. 3. A unit of computational power equal to that of a
single Cray-1. There is a standard joke about this usage that derives from an
old Crayola crayon promotional gimmick: When you buy 64 crayons you get a
free sharpener. :creationism: n. The (false) belief that large, innovative
software designs can be completely specified in advance and then painlessly
magicked out of the void by the normal efforts of a team of normally talented
programmers. In fact, experience has shown repeatedly that good designs arise
only from evolutionary, exploratory interaction between one (or at most a
small handful of) exceptionally able designer(s) and an active user
population -- and that the first try at a big new idea is always wrong.
Unfortunately, because these truths don't fit the planning models beloved of
{management}, they are generally ignored. :creep: v. To advance, grow, or
multiply inexorably. In hackish usage this verb has overtones of menace and
silliness, evoking the creeping horrors of low-budget monster movies.
:creeping elegance: n. Describes a tendency for parts of a design to become
{elegant} past the point of diminishing return, something which often happens
at the expense of the less interesting parts of the design, the schedule, and
other things deemed important in the {Real World}. see also {creeping
featurism}, {second-system effect}, {tense}. :creeping featurism: /kree'ping
fee'chr-izm/ n. [common] 1. Describes a systematic tendency to load more
{chrome} and {feature}s onto systems at the expense of whatever elegance they
may have possessed when originally designed. see also {feeping creaturism}.
"You know, the main problem with {BSD} Unix has always been creeping
featurism." 2. More generally, the tendency for anything complicated to
become even more complicated because people keep saying "Gee, it would be
even better if it had this feature too". (see {feature}.) The result is
usually a patchwork because it grew one ad-hoc step at a time, rather than
being planned. Planning is a lot of work, but it's easy to add just one extra
little feature to help someone ... and then another ... and another.... When
creeping featurism gets out of hand, it's like a cancer. Usually this term is
used to describe computer programs, but it could also be said of the federal
government, the IRS 1040 form, and new cars. A similar phenomenon sometimes
afflicts conscious redesigns; see {second-system effect}. see also {creeping
elegance}. :creeping featuritis: /kree'ping fee'-chr-i:`t*s/ n. Variant of
{creeping featurism}, with its own spoonerization: `feeping creaturitis'.
Some people like to reserve this form for the disease as it actually
manifests in software or hardware, as opposed to the lurking general tendency
in designers' minds. (After all, -ism means `condition' or `pursuit of',
whereas -itis usually means `inflammation of'.) :cretin: /kret'in/ or
/kree'tn/ n. Congenital {loser}; an obnoxious person; someone who can't do
anything right. It has been observed that many American hackers tend to favor
the British pronunciation /kret'in/ over standard American /kree'tn/; it is
thought this may be due to the insidious phonetic influence of Monty Python's
Flying Circus. :cretinous: /kret'n-*s/ or /kreet'n-*s/ adj. Wrong; stupid;
non-functional; very poorly designed. Also used pejoratively of people. see
{dread high-bit disease} for an example. Approximate synonyms: {bletcherous},
{bagbiting} {losing}, {brain-damaged}. :crippleware: n. 1. [common] Software
that has some important functionality deliberately removed, so as to entice
potential users to pay for a working version. 2. [Cambridge] Variety of
{guiltware} that exhorts you to donate to some charity (compare {careware},
{nagware}). 3. Hardware deliberately crippled, which can be upgraded to a
more expensive model by a trivial change (e.g., cutting a jumper). An
excellent example of crippleware (sense 3) is Intel's 486SX chip, which is a
standard 486DX chip with the co-processor dyked out (in some early versions
it was present but disabled). To upgrade, you buy a complete 486DX chip with
_working_ co-processor (its identity thinly veiled by a different pinout) and
plug it into the board's expansion socket. It then disables the SX, which
becomes a fancy power sink. Don't you love Intel? :critical mass: n. In
physics, the minimum amount of fissionable material required to sustain a
chain reaction. Of a software product, describes a condition of the software
such that fixing one bug introduces one plus {epsilon} bugs. (This malady has
many causes: {creeping featurism}, ports to too many disparate environments,
poor initial design, etc.) When software achieves critical mass, it can never
be fixed; it can only be discarded and rewritten. :crlf: /ker'l*f/, sometimes
/kru'l*f/ or /C-R-L-F/ n. (often capitalized as `CRLF') A carriage return
(CR, ASCII 0001101) followed by a line feed (LF, ASCII 0001010). More
loosely, whatever it takes to get you from the end of one line of text to the
beginning of the next line. see {newline}, {terpri}. Under {{Unix}} influence
this usage has become less common (Unix uses a bare line feed as its `CRLF').
:crock: n. [from the American scatologism `crock of shit'] 1. An awkward
feature or programming technique that ought to be made cleaner. For example,
using small integers to represent error codes without the program
interpreting them to the user (as in, for example, Unix `make(1)', which
returns code 139 for a process that dies due to {segfault}). 2. A technique
that works acceptably, but which is quite prone to failure if disturbed in
the least. For example, a too-clever programmer might write an assembler
which mapped instruction mnemonics to numeric opcodes algorithmically, a
trick which depends far too intimately on the particular bit patterns of the
opcodes. (For another example of programming with a dependence on actual
opcode values, see {The Story of Mel} in Appendix A.) Many crocks have a
tightly woven, almost completely unmodifiable structure. see {kluge},
{brittle}. The adjectives `crockish' and `crocky', and the nouns
`crockishness' and `crockitude', are also used. :cross-post: vi. [Usenet;
very common] To post a single article simultaneously to several newsgroups.
Distinguished from posting the article repeatedly, once to each newsgroup,
which causes people to see it multiple times (which is very bad form).
Gratuitous cross-posting without a Followup-To line directing responses to a
single followup group is frowned upon, as it tends to cause {followup}
articles to go to inappropriate newsgroups when people respond to only one
part of the original posting. :crudware: /kruhd'weir/ n. Pejorative term for
the hundreds of megabytes of low-quality {freeware} circulated by user's
groups and BBS systems in the micro-hobbyist world. "Yet _another_ set of
disk catalog utilities for {{MS-DOS}}? What crudware!" :cruft: /kruhft/ [very
common; back-formation from {crufty}] 1. n. An unpleasant substance. The dust
that gathers under your bed is cruft; the TMRC Dictionary correctly noted
that attacking it with a broom only produces more. 2. n. The results of
shoddy construction.