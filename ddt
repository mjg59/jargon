 D. C. Power Lab: n. The former site of {{SAIL}}. Hackers thought this was
very funny because the obvious connection to electrical engineering was
nonexistent --- the lab was named for a Donald C. Power. Compare {Marginal
Hacks}. daemon: /day'mn/ or /dee'mn/ [from the mythological meaning, later
rationalized as the acronym `Disk And Execution MONitor'] n. A program that
is not invoked explicitly, but lies dormant waiting for some condition(s) to
occur. The idea is that the perpetrator of the condition need not be aware
that a daemon is lurking (though often a program will commit an action only
because it knows that it will implicitly invoke a daemon). For example, under
{{ITS}} writing a file on the {LPT} spooler's directory would invoke the
spooling daemon, which would then print the file. The advantage is that
programs wanting (in this example) files printed need not compete for access
to the {LPT}. They simply enter their implicit requests and let the daemon
decide what to do with them. Daemons are usually spawned automatically by the
system, and may either live forever or be regenerated at intervals. Daemon
and {demon} are often used interchangeably, but seem to have distinct
connotations. The term `daemon' was introduced to computing by {CTSS} people
(who pronounced it /dee'mon/) and used it to refer to what ITS called a
{dragon}. Although the meaning and the pronunciation have drifted, we think
this glossary reflects current (1991) usage. dangling pointer: n. A reference
that doesn't actually lead anywhere (in C and some other languages, a pointer
that doesn't actually point at anything valid). Usually this is because it
formerly pointed to something that has moved or disappeared. Used as jargon
in a generalization of its techspeak meaning; for example, a local phone
number for a person who has since moved to the other coast is a dangling
pointer. Datamation: /day`t*-may'sh*n/ n. A magazine that many hackers assume
all {suit}s read. Used to question an unbelieved quote, as in "Did you read
that in `Datamation?'" It used to publish something hackishly funny every
once in a while, like the original paper on {COME FROM} in 1973, but it has
since become much more exclusively {suit}-oriented and boring. day mode: n.
see {phase} (sense 1). Used of people only. dd: /dee-dee/ [UNIX: from IBM
{JCL}] vt. Equivalent to {cat} or {BLT}. This was originally the name of a
UNIX copy command with special options suitable for block-oriented devices.
Often used in heavy-handed system maintenance, as in "Let's dd the root
partition onto a tape, then use the boot PROM to load it back on to a new
disk". The UNIX `dd(1)' was designed with a weird, distinctly non-UNIXy
keyword option syntax reminiscent of IBM System/360 JCL (which had a similar
DD command); though the command filled a need, the interface design was
clearly a prank. The jargon usage is now very rare outside UNIX sites and now
nearly obsolete even there, as `dd(1)' has been {deprecated} for a long time
(though it has no exact replacement). Replaced by {BLT} or simple English
`copy'. DDT: /D-D-T/ n. 1. Generic term for a program that assists in
debugging other programs by showing individual machine instructions in a
readable symbolic form and letting the user change them. In this sense the
term DDT is now archaic, having been widely displaced by `debugger' or names
of individual programs like `dbx', `adb', `gdb', or `sdb'. 2. [ITS] Under
MIT's fabled {{ITS}} operating system, DDT (running under the alias HACTRN)
was also used as the {shell} or top level command language used to execute
other programs. 3. Any one of several specific DDTs (sense 1) supported on
early DEC hardware. The DEC PDP-10 Reference Handbook (1969) contained a
footnote on the first page of the documentation for DDT which illuminates the
origin of the term: Historical footnote: DDT was developed at MIT for the
PDP-1 computer in 1961. At that time DDT stood for "DEC Debugging Tape".
Since then, the idea of an on-line debugging program has propagated
throughout the computer industry. DDT programs are now available for all DEC
computers. Since media other than tape are now frequently used, the more
descriptive name "Dynamic Debugging Technique" has been adopted, retaining
the DDT acronym. Confusion between DDT-10 and another well known pesticide,
dichloro-diphenyl-trichloroethane (C14-H9-Cl5) should be minimal since each
attacks a different, and apparently mutually exclusive, class of bugs. Sadly,
this quotation was removed from later editions of the handbook after the
{suit}s took over and DEC became much more `businesslike'. de-rezz:
/dee-rez'/ [from `de-resolve' via the movie "Tron"] (also `derez') 1. vi. To
disappear or dissolve; the image that goes with it is of an object breaking
up into raster lines and static and then dissolving. Occasionally used of a
person who seems to have suddenly `fuzzed out' mentally rather than
physically. Usage: extremely silly, also rare. This verb was actually
invented as *fictional* hacker jargon, and adopted in a spirit of irony by
real hackers years after the fact. 2. vt. On a Macintosh, many program
structures (including the code itself) are managed in small segments of the
program file known as `resources'. The standard resource compiler is Rez. The
standard resource decompiler is DeRez. Thus, decompiling a resource is
`derezzing'. Usage: very common. dead code: n. Routines that can never be
accessed because all calls to them have been removed, or code that cannot be
reached because it is guarded by a control structure that provably must
always transfer control somewhere else. The presence of dead code may reveal
either logical errors due to alterations in the program or significant
changes in the assumptions and environment of the program (see also {software
rot}); a good compiler should report dead code so a maintainer can think
about what it means. Syn. {grunge}.