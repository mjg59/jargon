 :OS and JEDGAR: =============== This story says a lot about the ITS ethos.
On the ITS system there was a program that allowed you to see what was being
printed on someone else's terminal. It spied on the other guy's output by
examining the insides of the monitor system. The output spy program was
called OS. Throughout the rest of the computer science (and at IBM too) OS
means `operating system', but among old-time ITS hackers it almost always
meant `output spy'. OS could work because ITS purposely had very little in
the way of `protection' that prevented one user from trespassing on another's
areas. Fair is fair, however. There was another program that would
automatically notify you if anyone started to spy on your output. It worked
in exactly the same way, by looking at the insides of the operating system to
see if anyone else was looking at the insides that had to do with your
output. This `counterspy' program was called JEDGAR (a six-letterism
pronounced as two syllables: /jed'gr/), in honor of the former head of the
FBI. But there's more. JEDGAR would ask the user for `license to kill'. If
the user said yes, then JEDGAR would actually {gun} the job of the {luser}
who was spying. Unfortunately, people found that this made life too violent,
especially when tourists learned about it. One of the systems hackers solved
the problem by replacing JEDGAR with another program that only pretended to
do its job. It took a long time to do this, because every copy of JEDGAR had
to be patched. To this day no one knows how many people never figured out
that JEDGAR had been defanged. Interestingly, there is still a security
module named JEDGAR alive as of late 1994 -- in the Unisys MCP for large
systems. It is unknown to us whether the name is tribute or independent
invention. :The Story of Mel: ================== This was posted to Usenet by
its author, Ed Nather (<utastro!nather>), on May 21, 1983. A recent article
devoted to the _macho_ side of programming made the bald and unvarnished
statement: Real Programmers write in FORTRAN. Maybe they do now, in this
decadent era of Lite beer, hand calculators, and "user-friendly" software but
back in the Good Old Days, when the term "software" sounded funny and Real
Computers were made out of drums and vacuum tubes, Real Programmers wrote in
machine code. Not FORTRAN. Not RATFOR. Not, even, assembly language. Machine
Code. Raw, unadorned, inscrutable hexadecimal numbers. Directly. Lest a whole
new generation of programmers grow up in ignorance of this glorious past, I
feel duty-bound to describe, as best I can through the generation gap, how a
Real Programmer wrote code. I'll call him Mel, because that was his name. I
first met Mel when I went to work for Royal McBee Computer Corp., a
now-defunct subsidiary of the typewriter company. The firm manufactured the
LGP-30, a small, cheap (by the standards of the day) drum-memory computer,
and had just started to manufacture the RPC-4000, a much-improved, bigger,
better, faster --- drum-memory computer. Cores cost too much, and weren't
here to stay, anyway. (That's why you haven't heard of the company, or the
computer.) I had been hired to write a FORTRAN compiler for this new marvel
and Mel was my guide to its wonders. Mel didn't approve of compilers. "If a
program can't rewrite its own code", he asked, "what good is it?" Mel had
written, in hexadecimal, the most popular computer program the company owned.
It ran on the LGP-30 and played blackjack with potential customers at
computer shows. Its effect was always dramatic. The LGP-30 booth was packed
at every show, and the IBM salesmen stood around talking to each other.
Whether or not this actually sold computers was a question we never
discussed. Mel's job was to re-write the blackjack program for the RPC-4000.
(Port? What does that mean?) The new computer had a one-plus-one addressing
scheme, in which each machine instruction, in addition to the operation code
and the address of the needed operand, had a second address that indicated
where, on the revolving drum, the next instruction was located. In modern
parlance, every single instruction was followed by a GO TO! Put _that_ in
Pascal's pipe and smoke it. Mel loved the RPC-4000 because he could optimize
his code: that is, locate instructions on the drum so that just as one
finished its job, the next would be just arriving at the "read head" and
available for immediate execution. There was a program to do that job, an
"optimizing assembler", but Mel refused to use it. "You never know where it's
going to put things", he explained, "so you'd have to use separate
constants". It was a long time before I understood that remark. Since Mel
knew the numerical value of every operation code, and assigned his own drum
addresses, every instruction he wrote could also be considered a numerical
constant. He could pick up an earlier "add" instruction, say, and multiply by
it, if it had the right numeric value. His code was not easy for someone else
to modify. I compared Mel's hand-optimized programs with the same code
massaged by the optimizing assembler program, and Mel's always ran faster.
That was because the "top-down" method of program design hadn't been invented
yet, and Mel wouldn't have used it anyway. He wrote the innermost parts of
his program loops first, so they would get first choice of the optimum
address locations on the drum. The optimizing assembler wasn't smart enough
to do it that way. Mel never wrote time-delay loops, either, even when the
balky Flexowriter required a delay between output characters to work right.
He just located instructions on the drum so each successive one was just
_past_ the read head when it was needed; the drum had to execute another
complete revolution to find the next instruction. He coined an unforgettable
term for this procedure. Although "optimum" is an absolute term, like
"unique", it became common verbal practice to make it relative: "not quite
optimum" or "less optimum" or "not very optimum". Mel called the maximum
time-delay locations the "most pessimum". After he finished the blackjack
program and got it to run ("Even the initializer is optimized", he said
proudly), he got a Change Request from the sales department. The program used
an elegant (optimized) random number generator to shuffle the "cards" and
deal from the "deck", and some of the salesmen felt it was too fair, since
sometimes the customers lost. They wanted Mel to modify the program so, at
the setting of a sense switch on the console, they could change the odds and
let the customer win. Mel balked. He felt this was patently dishonest, which
it was, and that it impinged on his personal integrity as a programmer, which
it did, so he refused to do it. The Head Salesman talked to Mel, as did the
Big Boss and, at the boss's urging, a few Fellow Programmers. Mel finally
gave in and wrote the code, but he got the test backwards, and, when the
sense switch was turned on, the program would cheat, winning every time. Mel
was delighted with this, claiming his subconscious was uncontrollably
ethical, and adamantly refused to fix it. After Mel had left the company for
greener pa$ture$, the Big Boss asked me to look at the code and see if I
could find the test and reverse it. Somewhat reluctantly, I agreed to look.
Tracking Mel's code was a real adventure. I have often felt that programming
is an art form, whose real value can only be appreciated by another versed in
the same arcane art; there are lovely gems and brilliant coups hidden from
human view and admiration, sometimes forever, by the very nature of the
process. You can learn a lot about an individual just by reading through his
code, even in hexadecimal. Mel was, I think, an unsung genius. Perhaps my
greatest shock came when I found an innocent loop that had no test in it. No
test. _None_. Common sense said it had to be a closed loop, where the program
would circle, forever, endlessly. Program control passed right through it,
however, and safely out the other side. It took me two weeks to figure it
out. The RPC-4000 computer had a really modern facility called an index
register. It allowed the programmer to write a program loop that used an
indexed instruction inside; each time through, the number in the index
register was added to the address of that instruction, so it would refer to
the next datum in a series. He had only to increment the index register each
time through. Mel never used it. Instead, he would pull the instruction into
a machine register, add one to its address, and store it back. He would then
execute the modified instruction right from the register. The loop was
written so this additional execution time was taken into account --- just as
this instruction finished, the next one was right under the drum's read head,
ready to go. But the loop had no test in it. The vital clue came when I
noticed the index register bit, the bit that lay between the address and the
operation code in the instruction word, was turned on --- yet Mel never used
the index register, leaving it zero all the time. When the light went on it
nearly blinded me. He had located the data he was working on near the top of
memory --- the largest locations the instructions could address --- so, after
the last datum was handled, incrementing the instruction address would make
it overflow. The carry would add one to the operation code, changing it to
the next one in the instruction set: a jump instruction. Sure enough, the
next program instruction was in address location zero, and the program went
happily on its way. I haven't kept in touch with Mel, so I don't know if he
ever gave in to the flood of change that has washed over programming
techniques since those long-gone days. I like to think he didn't. In any
event, I was impressed enough that I quit looking for the offending test,
telling the Big Boss I couldn't find it. He didn't seem surprised. When I
left the company, the blackjack program would still cheat if you turned on
the right sense switch, and I think that's how it should be. I didn't feel
comfortable hacking up the code of a Real Programmer. This is one of
hackerdom's great heroic epics, free verse or no. In a few spare images it
captures more about the esthetics and psychology of hacking than all the
scholarly volumes on the subject put together. For an opposing point of view,
see the entry for {Real Programmer}. [1992 postscript -- the author writes:
"The original submission to the net was not in free verse, nor any
approximation to it -- it was straight prose style, in non-justified
paragraphs. In bouncing around the net it apparently got modified into the
`free verse' form now popular. In other words, it got hacked on the net. That
seems appropriate, somehow." The author adds that he likes the `free-verse'
version better...] [1999 update: Mel's last name is now known. The manual for
the LGP-30 refers to "Mel Kaye of Royal McBee who did the bulk of the
programming [...] of the ACT 1 system".] :A Portrait of J. Random Hacker:
******************************** This profile reflects detailed comments on
an earlier `trial balloon' version from about a hundred Usenet respondents.
Where comparatives are used, the implicit `other' is a randomly selected
segment of the non-hacker population of the same size as hackerdom. An
important point: Except in some relatively minor respects such as slang
vocabulary, hackers don't get to be the way they are by imitating each other.
Rather, it seems to be the case that the combination of personality traits
that makes a hacker so conditions one's outlook on life that one tends to end
up being like other hackers whether one wants to or not (much as bizarrely
detailed similarities in behavior and preferences are found in genetic twins
raised separately). :General Appearance: ==================== Intelligent.
Scruffy. Intense. Abstracted. Surprisingly for a sedentary profession, more
hackers run to skinny than fat; both extremes are more common than elsewhere.
Tans are rare. :Dress: ======= Casual, vaguely post-hippie; T-shirts, jeans,
running shoes, Birkenstocks (or bare feet). Long hair, beards, and moustaches
are common. High incidence of tie-dye and intellectual or humorous `slogan'
T-shirts (only rarely computer related; that would be too obvious). A
substantial minority prefers `outdoorsy' clothing -- hiking boots ("in case a
mountain should suddenly spring up in the machine room", as one famous parody
put it), khakis, lumberjack or chamois shirts, and the like. Very few
actually fit the "National Lampoon" Nerd stereotype, though it lingers on at
MIT and may have been more common before 1975. At least since the late
Seventies backpacks have been more common than briefcases, and the hacker
`look' has been more whole-earth than whole-polyester. Hackers dress for
comfort, function, and minimal maintenance hassles rather than for appearance
(some, perhaps unfortunately, take this to extremes and neglect personal
hygiene). They have a very low tolerance of suits and other `business'
attire; in fact, it is not uncommon for hackers to quit a job rather than
conform to a dress code. Female hackers almost never wear visible makeup, and
many use none at all. :Reading Habits: ================ Omnivorous, but
usually includes lots of science and science fiction. The typical hacker
household might subscribe to "Analog", "Scientific American", "Whole-Earth
Review", and "Smithsonian" (most hackers ignore "Wired" and other
self-consciously `cyberpunk' magazines, considering them {wannabee} fodder).
Hackers often have a reading range that astonishes liberal arts people but
tend not to talk about it as much. Many hackers spend as much of their spare
time reading as the average American burns up watching TV, and often keep
shelves and shelves of well-thumbed books in their homes. :Other Interests:
================= Some hobbies are widely shared and recognized as going with
the culture: science fiction, music, medievalism (in the active form
practiced by the Society for Creative Anachronism and similar organizations),
chess, go, backgammon, wargames, and intellectual games of all kinds.
(Role-playing games such as Dungeons and Dragons used to be extremely popular
among hackers but they lost a bit of their luster as they moved into the
mainstream and became heavily commercialized. More recently, "Magic: The
Gathering" has been widely popular among hackers.) Logic puzzles. Ham radio.
Other interests that seem to correlate less strongly but positively with
hackerdom include linguistics and theater teching. :Physical Activity and
Sports: ============================== Many (perhaps even most) hackers don't
follow or do sports at all and are determinedly anti-physical. Among those
who do, interest in spectator sports is low to non-existent; sports are
something one _does_, not something one watches on TV. Further, hackers avoid
most team sports like the plague. Volleyball was long a notable exception,
perhaps because it's non-contact and relatively friendly; Ultimate Frisbee
has become quite popular for similar reasons. Hacker sports are almost always
primarily self-competitive ones involving concentration, stamina, and
micromotor skills: martial arts, bicycling, auto racing, kite flying, hiking,
rock climbing, aviation, target-shooting, sailing, caving, juggling, skiing,
skating (ice and roller). Hackers' delight in techno-toys also tends to draw
them towards hobbies with nifty complicated equipment that they can tinker
with. :Education: =========== Nearly all hackers past their teens are either
college-degreed or self-educated to an equivalent level. The self-taught
hacker is often considered (at least by other hackers) to be
better-motivated, and may be more respected, than his school-shaped
counterpart. Academic areas from which people often gravitate into hackerdom
include (besides the obvious computer science and electrical engineering)
physics, mathematics, linguistics, and philosophy. :Things Hackers Detest and
Avoid: ================================= IBM mainframes. Smurfs, Ewoks, and
other forms of offensive cuteness. Bureaucracies. Stupid people. Easy
listening music. Television (except for cartoons, movies, and "Star Trek"
classic). Business suits. Dishonesty. Incompetence. Boredom. COBOL. BASIC.
Character-based menu interfaces. :Food: ====== Ethnic. Spicy. Oriental, esp.
Chinese and most esp. Szechuan, Hunan, and Mandarin (hackers consider
Cantonese vaguely de'classe'). Hackers prefer the exotic; for example, the
Japanese-food fans among them will eat with gusto such delicacies as fugu
(poisonous pufferfish) and whale. Thai food has experienced flurries of
popularity. Where available, high-quality Jewish delicatessen food is much
esteemed. A visible minority of Southwestern and Pacific Coast hackers
prefers Mexican. For those all-night hacks, pizza and microwaved burritos are
big. Interestingly, though the mainstream culture has tended to think of
hackers as incorrigible junk-food junkies, many have at least mildly
health-foodist attitudes and are fairly discriminating about what they eat.
This may be generational; anecdotal evidence suggests that the stereotype was
more on the mark before the early 1980s. :Politics: ========== Vaguely
liberal-moderate, except for the strong libertarian contingent which rejects
conventional left-right politics entirely. The only safe generalization is
that hackers tend to be rather anti-authoritarian; thus, both conventional
conservatism and `hard' leftism are rare. Hackers are far more likely than
most non-hackers to either (a) be aggressively apolitical or (b) entertain
peculiar or idiosyncratic political ideas and actually try to live by them
day-to-day. :Gender and Ethnicity: ====================== Hackerdom is still
predominantly male. However, the percentage of women is clearly higher than
the low-single-digit range typical for technical professions, and female
hackers are generally respected and dealt with as equals. In the U.S.,
hackerdom is predominantly Caucasian with strong minorities of Jews (East
Coast) and Orientals (West Coast). The Jewish contingent has exerted a
particularly pervasive cultural influence (see {Food}, above, and note that
several common jargon terms are obviously mutated Yiddish). The ethnic
distribution of hackers is understood by them to be a function of which
ethnic groups tend to seek and value education. Racial and ethnic prejudice
is notably uncommon and tends to be met with freezing contempt. When asked,
hackers often ascribe their culture's gender- and color-blindness to a
positive effect of text-only network channels, and this is doubtless a
powerful influence. Also, the ties many hackers have to AI research and SF
literature may have helped them to develop an idea of personhood that is
inclusive rather than exclusive -- after all, if one's imagination readily
grants full human rights to future AI programs, robots, dolphins, and
extraterrestrial aliens, mere color and gender can't seem very important any
more. :Religion: ========== Agnostic. Atheist. Non-observant Jewish.
Neo-pagan. Very commonly, three or more of these are combined in the same
person. Conventional faith-holding Christianity is rare though not unknown.
Even hackers who identify with a religious affiliation tend to be relaxed
about it, hostile to organized religion in general and all forms of religious
bigotry in particular. Many enjoy `parody' religions such as Discordianism
and the Church of the SubGenius. Also, many hackers are influenced to varying
degrees by Zen Buddhism or (less commonly) Taoism, and blend them easily with
their `native' religions. There is a definite strain of mystical, almost
Gnostic sensibility that shows up even among those hackers not actively
involved with neo-paganism, Discordianism, or Zen. Hacker folklore that pays
homage to `wizards' and speaks of incantations and demons has too much
psychological truthfulness about it to be entirely a joke. :Ceremonial
Chemicals: ====================== Most hackers don't smoke tobacco, and use
alcohol in moderation if at all (though there is a visible contingent of
exotic-beer fanciers, and a few hackers are serious oenophiles). Limited use
of non-addictive psychedelic drugs, such as cannabis, LSD, psilocybin, and
nitrous oxide, etc., used to be relatively common and is still regarded with
more tolerance than in the mainstream culture. Use of `downers' and opiates,
on the other hand, appears to be particularly rare; hackers seem in general
to dislike drugs that make them stupid. On the third hand, many hackers
regularly wire up on caffeine and/or sugar for all-night hacking runs.
:Communication Style: ===================== see the discussions of speech and
writing styles near the beginning of this File. Though hackers often have
poor person-to-person communication skills, they are as a rule quite
sensitive to nuances of language and very precise in their use of it. They
are often better at writing than at speaking. :Geographical Distribution:
=========================== In the United States, hackerdom revolves on a Bay
Area-to-Boston axis; about half of the hard core seems to live within a
hundred miles of Cambridge (Massachusetts) or Berkeley (California), although
there are significant contingents in Los Angeles, in the Pacific Northwest,
and around Washington DC. Hackers tend to cluster around large cities,
especially `university towns' such as the Raleigh-Durham area in North
Carolina or Princeton, New Jersey (this may simply reflect the fact that many
are students or ex-students living near their alma maters). :Sexual Habits:
=============== Hackerdom easily tolerates a much wider range of sexual and
lifestyle variation than the mainstream culture. It includes a relatively
large gay and bisexual contingent. Hackers are somewhat more likely to live
in polygynous or polyandrous relationships, practice open marriage, or live
in communes or group houses. In this, as in general appearance, hackerdom
semi-consciously maintains `counterculture' values. :Personality
Characteristics: ============================= The most obvious common
`personality' characteristics of hackers are high intelligence, consuming
curiosity, and facility with intellectual abstractions. Also, most hackers
are `neophiles', stimulated by and appreciative of novelty (especially
intellectual novelty). Most are also relatively individualistic and
anti-conformist. Although high general intelligence is common among hackers,
it is not the sine qua non one might expect. Another trait is probably even
more important: the ability to mentally absorb, retain, and reference large
amounts of `meaningless' detail, trusting to later experience to give it
context and meaning. A person of merely average analytical intelligence who
has this trait can become an effective hacker, but a creative genius who
lacks it will swiftly find himself outdistanced by people who routinely
upload the contents of thick reference manuals into their brains. [During the
production of the first book version of this document, for example, I learned
most of the rather complex typesetting language TeX over about four working
days, mainly by inhaling Knuth's 477-page manual. My editor's flabbergasted
reaction to this genuinely surprised me, because years of associating with
hackers have conditioned me to consider such performances routine and to be
expected. --ESR] Contrary to stereotype, hackers are _not_ usually
intellectually narrow; they tend to be interested in any subject that can
provide mental stimulation, and can often discourse knowledgeably and even
interestingly on any number of obscure subjects -- if you can get them to
talk at all, as opposed to, say, going back to their hacking. It is
noticeable (and contrary to many outsiders' expectations) that the better a
hacker is at hacking, the more likely he or she is to have outside interests
at which he or she is more than merely competent. Hackers are `control
freaks' in a way that has nothing to do with the usual coercive or
authoritarian connotations of the term. In the same way that children delight
in making model trains go forward and back by moving a switch, hackers love
making complicated things like computers do nifty stuff for them. But it has
to be _their_ nifty stuff. They don't like tedium, nondeterminism, or most of
the fussy, boring, ill-defined little tasks that go with maintaining a normal
existence. Accordingly, they tend to be careful and orderly in their
intellectual lives and chaotic elsewhere. Their code will be beautiful, even
if their desks are buried in 3 feet of crap. Hackers are generally only very
weakly motivated by conventional rewards such as social approval or money.
They tend to be attracted by challenges and excited by interesting toys, and
to judge the interest of work or other activities in terms of the challenges
offered and the toys they get to play with. In terms of Myers-Briggs and
equivalent psychometric systems, hackerdom appears to concentrate the
relatively rare INTJ and INTP types; that is, introverted, intuitive, and
thinker types (as opposed to the extroverted-sensate personalities that
predominate in the mainstream culture). ENT[JP] types are also concentrated
among hackers but are in a minority. :Weaknesses of the Hacker Personality:
====================================== Hackers have relatively little ability
to identify emotionally with other people. This may be because hackers
generally aren't much like `other people'. Unsurprisingly, hackers also tend
towards self-absorption, intellectual arrogance, and impatience with people
and tasks perceived to be wasting their time. As cynical as hackers sometimes
wax about the amount of idiocy in the world, they tend by reflex to assume
that everyone is as rational, `cool', and imaginative as they consider
themselves. This bias often contributes to weakness in communication skills.
Hackers tend to be especially poor at confrontation and negotiation. Because
of their passionate embrace of (what they consider to be) the {Right Thing},
hackers can be unfortunately intolerant and bigoted on technical issues, in
marked contrast to their general spirit of camaraderie and tolerance of
alternative viewpoints otherwise. Old-time {{ITS}} partisans look down on the
ever-growing hordes of {{Unix}} hackers; Unix aficionados despise {VMS} and
{{MS-DOS}}; and hackers who are used to conventional command-line user
interfaces loudly loathe mouse-and-menu based systems such as the Macintosh.
Hackers who don't indulge in {Usenet} consider it a huge waste of time and
{bandwidth}; fans of old adventure games such as {ADVENT} and {Zork} consider
{MUD}s to be glorified chat systems devoid of atmosphere or interesting
puzzles; hackers who are willing to devote endless hours to Usenet or MUDs
consider {IRC} to be a _real_ waste of time; IRCies think MUDs might be okay
if there weren't all those silly puzzles in the way. And, of course, there
are the perennial {holy wars} -- {EMACS} vs. {vi}, {big-endian} vs.
{little-endian}, RISC vs. CISC, etc., etc., etc. As in society at large, the
intensity and duration of these debates is usually inversely proportional to
the number of objective, factual arguments available to buttress any
position. As a result of all the above traits, many hackers have difficulty
maintaining stable relationships. At worst, they can produce the classic
{computer geek}: withdrawn, relationally incompetent, sexually frustrated,
and desperately unhappy when not submerged in his or her craft. Fortunately,
this extreme is far less common than mainstream folklore paints it -- but
almost all hackers will recognize something of themselves in the unflattering
paragraphs above. Hackers are often monumentally disorganized and sloppy
about dealing with the physical world. Bills don't get paid on time, clutter
piles up to incredible heights in homes and offices, and minor maintenance
tasks get deferred indefinitely. 1994-95's fad behavioral disease was a
syndrome called Attention Deficit Disorder, supposedly characterized by
(among other things) a combination of short attention span with an ability to
`hyperfocus' imaginatively on interesting tasks. There are grounds for
questioning whether ADD actually exists, and if it does whether it is really
a `disease' rather than an extreme of a normal genetic variation like having
freckles or being able to taste DPT; but it is certainly true that many
hacker traits coincide with major indicators for ADD, and probably true that
ADD boosters would find a far higher rate of clinical ADD among hackers than
the supposedly mainstream-normal 10%. The sort of person who routinely uses
phrases like `incompletely socialized' usually thinks hackers are. Hackers
regard such people with contempt when they notice them at all.
:Miscellaneous: =============== Hackers are more likely to have cats than
dogs (in fact, it is widely grokked that cats have the hacker nature). Many
drive incredibly decrepit heaps and forget to wash them; richer ones drive
spiffy Porsches and RX-7s and then forget to have them washed. Almost all
hackers have terribly bad handwriting, and often fall into the habit of
block-printing everything like junior draftsmen. :Helping Hacker Culture
Grow: ***************************** If you enjoyed the Jargon File, please
help the culture that created it grow and flourish. Here are several ways you
can help: * If you are a writer or journalist, don't say or write {hacker}
when you mean {cracker}. If you work with writers or journalists, educate
them on this issue and push them to do the right thing. If you catch a
newspaper or magazine abusing the work `hacker', write them and straigten
them out (this appendix includes a model letter). * If you're a techie or
computer hobbyist, get involved with one of the free Unixes. Toss out that
lame Microsoft OS, or confine it to one disk partition and put Linux or
FreeBSD or NetBSD on the other one. And the next time your friend or boss is
thinking about some proprietary software `solution' that costs more than it's
worth, be ready to blow the competition away with open-source software
running over a Unix. * Contribute to organizations like the Free Software
Foundation that promote the production of high-quality free and open-source
software. You can reach the Free Software Foundation at gnu@prep.ai.mit.edu,
by phone at +1-617-542-5942, or by snail-mail at 59 Temple Place, Suite 330,
Boston, MA 02111-1307 USA. * Support the League for Programming Freedom,
which opposes over-broad software patents that constantly threaten to blow up
in hackers' faces, preventing them from developing innovative software for
tomorrow's needs. You can reach the League for Programming Freedom at
lpf@uunet.uu.net. by phone at +1 617 621 7084, or by snail-mail at 1 Kendall
Square #143, P.O.Box 9171, Cambridge, Massachusetts 02139 USA. * If you do
nothing else, please help fight government attempts to seize political
control of Internet content and restrict strong cryptography. As TNHD III
went to press, the so-called `Communications Decency Act' had just been
declared "unconstitutional on its face" by a Federal court, but the
government is expected to appeal. If it's still law when you read this,
please join the effort by the Citizens' Internet Empowerment Coalition
lawsuit to have the CDA quashed or repealed. Surf to the Center for Democracy
and technology's home page at `http://www.cdt.org' to see what you can do to
help fight censorship of the net. Here's the text of a letter RMS wrote to
the Wall Street Journal to complain about their policy of using "hacker" only
in a pejorative sense. We hear that most major newspapers have the same
policy. If you'd like to help change this situation, send your favorite
newspaper the same letter - or, better yet, write your own letter. Dear
Editor: This letter is not meant for publication, although you can publish it
if you wish. It is meant specifically for you, the editor, not the public. I
am a hacker. That is to say, I enjoy playing with computers -- working with,
learning about, and writing clever computer programs. I am not a cracker; I
don't make a practice of breaking computer security. There's nothing shameful
about the hacking I do. But when I tell people I am a hacker, people think
I'm admitting something naughty -- because newspapers such as yours misuse
the word "hacker", giving the impression that it means "security breaker" and
nothing else. You are giving hackers a bad name. The saddest thing is that
this problem is perpetuated deliberately. Your reporters know the difference
between "hacker" and "security breaker". They know how to make the
distinction, but you don't let them! You insist on using "hacker"
pejoratively. When reporters try to use another word, you change it. When
reporters try to explain the other meanings, you cut it. Of course, you have
a reason. You say that readers have become used to your insulting usage of
"hacker", so that you cannot change it now. Well, you can't undo past
mistakes today; but that is no excuse to repeat them tomorrow. If I were what
you call a "hacker", at this point I would threaten to crack your computer
and crash it. But I am a hacker, not a cracker. I don't do that kind of
thing! I have enough computers to play with at home and at work; I don't need
yours. Besides, it's not my way to respond to insults with violence. My
response is this letter. You owe hackers an apology; but more than that, you
owe us ordinary respect. Sincerely, etc. :Bibliography: ************** Here
are some other books you can read to help you understand the hacker mindset.
:Go"del, Escher, Bach: An Eternal Golden Braid: Douglas Hofstadter Basic
Books, 1979 ISBN 0-394-74502-7 This book reads like an intellectual Grand
Tour of hacker preoccupations. Music, mathematical logic, programming,
speculations on the nature of intelligence, biology, and Zen are woven into a
brilliant tapestry themed on the concept of encoded self-reference. The
perfect left-brain companion to "Illuminatus". :Illuminatus!: I. "The Eye in
the Pyramid" II. "The Golden Apple" III. "Leviathan". Robert Shea and Robert
Anton Wilson Dell, 1988 ISBN 0-440-53981-1 This work of alleged fiction is an
incredible berserko-surrealist rollercoaster of world-girdling conspiracies,
intelligent dolphins, the fall of Atlantis, who really killed JFK, sex,
drugs, rock'n'roll, and the Cosmic Giggle Factor. First published in three
volumes, but there is now a one-volume trade paperback, carried by most chain
bookstores under SF. The perfect right-brain companion to Hofstadter's
"Go"del, Escher, Bach". see {Eris}, {Discordianism}, {random numbers},
{Church of the SubGenius}. :The Hitchhiker's Guide to the Galaxy: Douglas
Adams Pocket Books, 1981 ISBN 0-671-46149-4 This `Monty Python in Space'
spoof of SF genre traditions has been popular among hackers ever since the
original British radio show. Read it if only to learn about Vogons (see
{bogon}) and the significance of the number 42 (see {random numbers}) -- and
why the winningest chess program of 1990 was called `Deep Thought'. :The Tao
of Programming: James Geoffrey Infobooks, 1987 ISBN 0-931137-07-1 This
gentle, funny spoof of the "Tao Te Ching" contains much that is illuminating
about the hacker way of thought. "When you have learned to snatch the error
code from the trap frame, it will be time for you to leave." :Hackers: Steven
Levy Anchor/Doubleday 1984 ISBN 0-385-19195-2 Levy's book is at its best in
describing the early MIT hackers at the Model Railroad Club and the early
days of the microcomputer revolution. He never understood Unix or the
networks, though, and his enshrinement of Richard Stallman as "the last true
hacker" turns out (thankfully) to have been quite misleading. Numerous minor
factual errors also mar the text; for example, Levy's claim that the original
Jargon File derived from the TMRC Dictionary (the File originated at Stanford
and was brought to MIT in 1976; the co-authors of the first edition had never
seen the dictionary in question). There are also numerous misspellings in the
book that inflame the passions of old-timers; as Dan Murphy, the author of
TECO, once said: "You would have thought he'd take the trouble to spell the
name of a winning editor right." Nevertheless, this remains a useful and
stimulating book that captures the feel of several important hackish
subcultures. :The Computer Contradictionary: Stan Kelly-Bootle MIT Press,
1995 ISBN 0-262-61112-0 This pastiche of Ambrose Bierce's famous work is
similar in format to the Jargon File (and quotes several entries from TNHD-2)
but somewhat different in tone and intent. It is more satirical and less
anthropological, and is largely a product of the author's literate and quirky
imagination. For example, it defines `computer science' as "a study akin to
numerology and astrology, but lacking the precision of the former and the
success of the latter" and `implementation' as "The fruitless struggle by the
talented and underpaid to fulfill promises made by the rich and ignorant";
`flowchart' becomes "to obfuscate a problem with esoteric cartoons". Revised
and expanded from "The Devil's DP Dictionary", McGraw-Hill 1981, ISBN
0-07-034022-6. :The Devouring Fungus: Tales from the Computer Age: Karla
Jennings Norton, 1990 ISBN 0-393-30732-8 The author of this pioneering
compendium knits together a great deal of computer- and hacker-related
folklore with good writing and a few well-chosen cartoons. She has a keen eye
for the human aspects of the lore and is very good at illuminating the
psychology and evolution of hackerdom. Unfortunately, a number of small
errors and awkwardnesses suggest that she didn't have the final manuscript
checked over by a native speaker; the glossary in the back is particularly
embarrassing, and at least one classic tale (the Magic Switch story, retold
here under {A Story About `Magic'} in Appendix A is given in incomplete and
badly mangled form. Nevertheless, this book is a win overall and can be
enjoyed by hacker and non-hacker alike. :The Soul of a New Machine: Tracy
Kidder Little, Brown, 1981 (paperback: Avon, 1982 ISBN 0-380-59931-7) This
book (a 1982 Pulitzer Prize winner) documents the adventure of the design of
a new Data General computer, the MV-8000 Eagle. It is an amazingly well-done
portrait of the hacker mindset -- although largely the hardware hacker --
done by a complete outsider. It is a bit thin in spots, but with enough
technical information to be entertaining to the serious hacker while
providing non-technical people a view of what day-to-day life can be like --
the fun, the excitement, the disasters. During one period, when the microcode
and logic were glitching at the nanosecond level, one of the overworked
engineers departed the company, leaving behind a note on his terminal as his
letter of resignation: "I am going to a commune in Vermont and will deal with
no unit of time shorter than a season." :Life with UNIX: a Guide for
Everyone: Don Libes and Sandy Ressler Prentice-Hall, 1989 ISBN 0-13-536657-7
The authors of this book set out to tell you all the things about Unix that
tutorials and technical books won't. The result is gossipy, funny,
opinionated, downright weird in spots, and invaluable. Along the way they
expose you to enough of Unix's history, folklore and humor to qualify as a
first-class source for these things. Because so much of today's hackerdom is
involved with Unix, this in turn illuminates many of its in-jokes and
preoccupations. :True Names ... and Other Dangers: Vernor Vinge Baen Books,
1987 ISBN 0-671-65363-6 Hacker demigod Richard Stallman used to say that the
title story of this book "expresses the spirit of hacking best". Until the
subject of the next entry came out, it was hard to even nominate another
contender. The other stories in this collection are also fine work by an
author who has since won multiple Hugos and is one of today's very best
practitioners of hard SF. :Snow Crash: Neal Stephenson Bantam, 1992 ISBN
0-553-56261-4 Stephenson's epic, comic cyberpunk novel is deeply knowing
about the hacker psychology and its foibles in a way no other author of
fiction has ever even approached. His imagination, his grasp of the relevant
technical details, and his ability to communicate the excitement of hacking
and its results are astonishing, delightful, and (so far) unsurpassed.
:Cyberpunk: Outlaws and Hackers on the Computer Frontier: Katie Hafner & John
Markoff Simon & Schuster 1991