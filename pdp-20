 PDP-20: n. The most famous computer that never was. {PDP-10} computers
running the {{TOPS-10}} operating system were labeled `DECsystem-10' as a way
of differentiating them from the PDP-11. Later on, those systems running
{TOPS-20} were labeled `DECSYSTEM-20' (the block capitals being the result of
a lawsuit brought against DEC by Singer, which once made a computer called
`system-10'), but contrary to popular lore there was never a `PDP-20'; the
only difference between a 10 and a 20 was the operating system and the color
of the paint. Most (but not all) machines sold to run TOPS-10 were painted
`Basil Blue', whereas most TOPS-20 machines were painted `Chinese Red' (often
mistakenly called orange). peek: n.,vt. (and {poke}) The commands in most
microcomputer BASICs for directly accessing memory contents at an absolute
address; often extended to mean the corresponding constructs in any {HLL}
(peek reads memory, poke modifies it). Much hacking on small, non-MMU micros
consists of {peek}ing around memory, more or less at random, to find the
location where the system keeps interesting stuff. Long (and variably
accurate) lists of such addresses for various computers circulate (see
{{interrupt list, the}}). The results of {poke}s at these addresses may be
highly useful, mildly amusing, useless but neat, or (most likely) total
{lossage} (see {killer poke}). pencil and paper: n. An archaic information
storage and transmission device that works by depositing smears of graphite
on bleached wood pulp. More recent developments in paper-based technology
include improved `write-once' update devices which use tiny rolling heads
similar to mouse balls to deposit colored pigment. All these devices require
an operator skilled at so-called `handwriting' technique. These technologies
are ubiquitous outside hackerdom, but nearly forgotten inside it. Most
hackers had terrible handwriting to begin with, and years of keyboarding tend
to have encouraged it to degrade further. Perhaps for this reason, hackers
deprecate pencil-and-paper technology and often resist using it in any but
the most trivial contexts. see also appendix B. peon: n. A person with no
special ({root} or {wheel}) privileges on a computer system. "I can't create
an account on *foovax* for you; I'm only a peon there." percent-S: /per-sent'
es'/ [From the code in C's `printf(3)' library function used to insert an
arbitrary string argument] n. An unspecified person or object. "I was just
talking to some percent-s in administration." Compare {random}. perf: /perf/
n. see {chad} (sense 1). The term `perfory' /per'f*-ree/ is also heard.
perfect programmer syndrome: n. Arrogance; the egotistical conviction that
one is above normal human error. Most frequently found among programmers of
some native ability but relatively little experience (especially new
graduates; their perceptions may be distorted by a history of excellent
performance at solving {toy problem}s). "Of course my program is correct,
there is no need to test it." "Yes, I can see there may be a problem here,
but *I'll* never type `rm -r /' while in {root}." Perl: /perl/ [Practical
Extraction and Report Language, a.k.a Pathologically Eclectic Rubbish Lister]
n. An interpreted language developed by Larry Wall (lwall@jpl.nasa.gov,
author of `patch(1)' and `rn(1)') and distributed over USENET. Superficially
resembles `awk(1)', but is much hairier (see {awk}). UNIX sysadmins, who are
almost always incorrigible hackers, increasingly consider it one of the
{languages of choice}. Perl has been described, in a parody of a famous
remark about `lex(1)', as the "Swiss-Army chainsaw" of UNIX programming.
pessimal: /pes'im-l/ [Latin-based antonym for `optimal'] adj. Maximally bad.
"This is a pessimal situation." Also `pessimize' vt. To make as bad as
possible. These words are the obvious Latin-based antonyms for `optimal' and
`optimize', but for some reason they do not appear in most English
dictionaries, although `pessimize' is listed in the OED. pessimizing
compiler: /pes'*-mi:z`ing k*m-pi:l'r/ [antonym of `optimizing compiler'] n. A
compiler that produces object code that is worse than the straightforward or
obvious hand translation. The implication is that the compiler is actually
trying to optimize the program, but through excessive cleverness is doing the
opposite. A few pessimizing compilers have been written on purpose, however,
as pranks or burlesques. peta-: /pe't*/ [SI] pref. see {{quantifiers}}.