 JEDGAR (a six-letterism pronounced as two syllables: /jed'gr/), in honor of
the former head of the FBI. But there's more. The rest of the story is that
JEDGAR would ask the user for `license to kill'. If the user said yes, then
JEDGAR would actually {gun} the job of the {luser} who was spying.
Unfortunately, people found this made life too violent, especially when
tourists learned about it. One of the systems hackers solved the problem by
replacing JEDGAR with another program that only pretended to do its job. It
took a long time to do this, because every copy of JEDGAR had to be patched,
and to this day no one knows how many people never figured out that JEDGAR
had been defanged. The Story of Mel, a Real Programmer
=================================== This was posted to USENET by its author
Ed Nather (utastro!nather) on May 21, 1983. A recent article devoted to the
*macho* side of programming made the bald and unvarnished statement: Real
Programmers write in Fortran. Maybe they do now, in this decadent era of Lite
beer, hand calculators and "user-friendly" software but back in the Good Old
Days, when the term "software" sounded funny and Real Computers were made out
of drums and vacuum tubes, Real Programmers wrote in machine code. Not
Fortran. Not RATFOR. Not, even, assembly language. Machine Code. Raw,
unadorned, inscrutable hexadecimal numbers. Directly. Lest a whole new
generation of programmers grow up in ignorance of this glorious past, I feel
duty-bound to describe, as best I can through the generation gap, how a Real
Programmer wrote code. I'll call him Mel, because that was his name. I first
met Mel when I went to work for Royal McBee Computer Corp., a now-defunct
subsidiary of the typewriter company. The firm manufactured the LGP-30, a
small, cheap (by the standards of the day) drum-memory computer, and had just
started to manufacture the RPC-4000, a much-improved, bigger, better, faster
--- drum-memory computer. Cores cost too much, and weren't here to stay,
anyway. (That's why you haven't heard of the company, or the computer.) I had
been hired to write a Fortran compiler for this new marvel and Mel was my
guide to its wonders. Mel didn't approve of compilers. "If a program can't
rewrite its own code", he asked, "what good is it?" Mel had written, in
hexadecimal, the most popular computer program the company owned. It ran on
the LGP-30 and played blackjack with potential customers at computer shows.
Its effect was always dramatic. The LGP-30 booth was packed at every show,
and the IBM salesmen stood around talking to each other. Whether or not this
actually sold computers was a question we never discussed. Mel's job was to
re-write the blackjack program for the RPC-4000. (Port? What does that mean?)
The new computer had a one-plus-one addressing scheme, in which each machine
instruction, in addition to the operation code and the address of the needed
operand, had a second address that indicated where, on the revolving drum,
the next instruction was located. In modern parlance, every single
instruction was followed by a GO TO! Put *that* in Pascal's pipe and smoke
it. Mel loved the RPC-4000 because he could optimize his code: that is,
locate instructions on the drum so that just as one finished its job, the
next would be just arriving at the "read head" and available for immediate
execution. There was a program to do that job, an "optimizing assembler", but
Mel refused to use it. "You never know where its going to put things", he
explained, "so you'd have to use separate constants". It was a long time
before I understood that remark. Since Mel knew the numerical value of every
operation code, and assigned his own drum addresses, every instruction he
wrote could also be considered a numerical constant. He could pick up an
earlier "add" instruction, say, and multiply by it, if it had the right
numeric value. His code was not easy for someone else to modify. I compared
Mel's hand-optimized programs with the same code massaged by the optimizing
assembler program, and Mel's always ran faster. That was because the
"top-down" method of program design hadn't been invented yet, and Mel
wouldn't have used it anyway. He wrote the innermost parts of his program
loops first, so they would get first choice of the optimum address locations
on the drum. The optimizing assembler wasn't smart enough to do it that way.
Mel never wrote time-delay loops, either, even when the balky Flexowriter
required a delay between output characters to work right. He just located
instructions on the drum so each successive one was just *past* the read head
when it was needed; the drum had to execute another complete revolution to
find the next instruction. He coined an unforgettable term for this
procedure. Although "optimum" is an absolute term, like "unique", it became
common verbal practice to make it relative: "not quite optimum" or "less
optimum" or "not very optimum". Mel called the maximum time-delay locations
the "most pessimum". After he finished the blackjack program and got it to
run, ("Even the initializer is optimized", he said proudly) he got a Change
Request from the sales department. The program used an elegant (optimized)
random number generator to shuffle the "cards" and deal from the "deck", and
some of the salesmen felt it was too fair, since sometimes the customers
lost. They wanted Mel to modify the program so, at the setting of a sense
switch on the console, they could change the odds and let the customer win.
Mel balked. He felt this was patently dishonest, which it was, and that it
impinged on his personal integrity as a programmer, which it did, so he
refused to do it. The Head Salesman talked to Mel, as did the Big Boss and,
at the boss's urging, a few Fellow Programmers. Mel finally gave in and wrote
the code, but he got the test backwards, and, when the sense switch was
turned on, the program would cheat, winning every time. Mel was delighted
with this, claiming his subconscious was uncontrollably ethical, and
adamantly refused to fix it. After Mel had left the company for greener
pa$ture$, the Big Boss asked me to look at the code and see if I could find
the test and reverse it. Somewhat reluctantly, I agreed to look. Tracking
Mel's code was a real adventure. I have often felt that programming is an art
form, whose real value can only be appreciated by another versed in the same
arcane art; there are lovely gems and brilliant coups hidden from human view
and admiration, sometimes forever, by the very nature of the process. You can
learn a lot about an individual just by reading through his code, even in
hexadecimal. Mel was, I think, an unsung genius. Perhaps my greatest shock
came when I found an innocent loop that had no test in it. No test. *None*.
Common sense said it had to be a closed loop, where the program would circle,
forever, endlessly. Program control passed right through it, however, and
safely out the other side. It took me two weeks to figure it out. The
RPC-4000 computer had a really modern facility called an index register. It
allowed the programmer to write a program loop that used an indexed
instruction inside; each time through, the number in the index register was
added to the address of that instruction, so it would refer to the next datum
in a series. He had only to increment the index register each time through.
Mel never used it. Instead, he would pull the instruction into a machine
register, add one to its address, and store it back. He would then execute
the modified instruction right from the register. The loop was written so
this additional execution time was taken into account --- just as this
instruction finished, the next one was right under the drum's read head,
ready to go. But the loop had no test in it. The vital clue came when I
noticed the index register bit, the bit that lay between the address and the
operation code in the instruction word, was turned on --- yet Mel never used
the index register, leaving it zero all the time. When the light went on it
nearly blinded me. He had located the data he was working on near the top of
memory --- the largest locations the instructions could address --- so, after
the last datum was handled, incrementing the instruction address would make
it overflow. The carry would add one to the operation code, changing it to
the next one in the instruction set: a jump instruction. Sure enough, the
next program instruction was in address location zero, and the program went
happily on its way. I haven't kept in touch with Mel, so I don't know if he
ever gave in to the flood of change that has washed over programming
techniques since those long-gone days. I like to think he didn't. In any
event, I was impressed enough that I quit looking for the offending test,
telling the Big Boss I couldn't find it. He didn't seem surprised. When I
left the company, the blackjack program would still cheat if you turned on
the right sense switch, and I think that's how it should be. I didn't feel
comfortable hacking up the code of a Real Programmer. [This is one of
hackerdom's great heroic epics, free verse or no. In a few spare images it
captures more about the esthetics and psychology of hacking than every
scholarly volume on the subject put together. For an opposing point of view,
see the entry for {real programmer}.] Appendix B: A Portrait of J. Random
Hacker ****************************************** This profile reflects
detailed comments on an earlier `trial balloon' version from about a hundred
USENET respondents. Where comparatives are used, the implicit `other' is a
randomly selected group from the non-hacker population of the same size as
hackerdom. General appearance: =================== Intelligent. Scruffy.
Intense. Abstracted. Surprisingly for a sedentary profession, more hackers
run to skinny than fat; both extremes are more common than elsewhere. Tans
are rare. Dress: ====== Casual, vaguely post-hippy; T-shirts, jeans, running
shoes, Birkenstocks (or bare feet). Long hair, beards and moustaches are
common. High incidence of tie-dye and intellectual or humorous `slogan'
T-shirts (only rarely computer related; that's too obvious). A substantial
minority prefers `outdoorsy' clothing --- hiking boots ("in case a mountain
should suddenly spring up in the machine room", as one famous parody put it),
khakis, lumberjack or chamois shirts and the like. Very few actually fit the
National-Lampoon-Nerd stereotype, though it lingers on at MIT and may have
been more common before 1975. These days, backpacks are more common than
briefcases, and the hacker `look' is more whole-earth than whole-polyester.
Hackers dress for comfort, function, and minimal maintenance hassles rather
than for appearance (some, perhaps unfortunately, take this to extremes and
neglect personal hygiene). They have a very low tolerance of suits or other
`business' attire, in fact it is not uncommon for hackers to quit a job
rather than conform to a dress code. Female hackers never wear visible makeup
and many use none at all. Reading habits: =============== Omnivorous, but
usually includes lots of science and science fiction. The typical hacker
household might subscribe to `Analog', `Scientific American', `Co-Evolution
Quarterly', and `Smithsonian'. Hackers often have a reading range that
astonishes `liberal arts' people but tend not to talk about it as much. Many
hackers spend as much of their spare time reading as the average American
burns up watching TV, and often keep shelves and shelves of well-thumbed
books in their homes. Other interests: ================ Some hobbies are
widely shared and recognized as going with the culture. Science fiction.
Music. Medievalism. Chess, go, backgammon, wargames and intellectual games of
all kinds. (Role-playing games such as Dungeons and Dragons used to be
extremely popular among hackers but have lost a bit of their former luster as
they moved into the mainstream and became heavily commercialized.) Logic
puzzles. Ham radio. Other interests that seem to correlate less strongly but
positively with hackerdom include: linguistics and theater teching. Physical
Activity and Sports: ============================= Many (perhaps even most)
hackers don't follow or do sports at all and are determinedly anti-physical.
Among those who do, interest in spectator sports is low to non-existent;
sports are something one *does*, not something one watches on TV. Further,
hackers avoid most team sports like the plague (though volleyball is a
notable exception, perhaps because it's non-contact and relatively friendly).
Hacker sports are are almost always primarily self-competitive ones involving
concentration, stamina, and micromotor skills: martial arts, bicycling, auto
racing, kite-flying, hiking, rock-climbing, sailing, caving, juggling,
skiing, skating (ice and roller). Education: ========== Nearly all hackers
past their teens are either college-degreed or self-educated to an equivalent
level. The self-taught hacker is often considered (at least by other hackers)
to be better-motivated, and may be more respected than his school-shaped
counterpart. Academic areas from which people often gravitate into hackerdom
include (besides the obvious computer science and electrical engineering)
physics, mathematics, linguistics, and philosophy. Things hackers detest and
avoid: ================================ IBM mainframes. Smurfs, Ewoks, and
other forms of offensive cuteness. Bureaucracies. Stupid people. Easy
listening music. Television (except for cartoons, movies, the old `Star
Trek', and the new `Simpsons'). Business suits. Dishonesty. Incompetence.
Boredom. BASIC. Character-based menu interfaces. Food: ===== Ethnic. Spicy.
Oriental, esp. Chinese and most especially Szechuan, Hunan and Mandarin
(hackers consider Cantonese vaguely declasse). Hackers prefer the exotic; for
example, the Japanese-food fans among them will eat with gusto such
delicacies as fugu (poisonous pufferfish) and whale. Thai food has
experienced flurries of popularity. Where available, high-quality Jewish
delicatessen food is much esteemed. A visible minority of Southwestern and
Pacific Coast hackers prefers Mexican. For those all-night hacks, pizza and
microwaved burritos are big. Interestingly, though the mainstream culture has
tended to think of hackers as incorrigible junk-food junkies, many have at
least mildly health-foodist attitudes and are fairly discriminating about
what they eat. This may be generational; anecdotal evidence suggests that the
stereotype was more on the mark ten to fifteen years ago. Politics: =========
Vaguely left of center, except for the strong libertarian contingent which
rejects conventional left-right politics entirely. The only safe
generalization is that almost all hackers are anti-authoritarian, thus both
conventional conservatism and `hard' leftism are rare. Hackers are far more
likely than most non-hackers to either (a) be aggressively apolitical, or (b)
entertain peculiar or idiosyncratic political ideas and actually try to live
by them day-to-day. Gender & Ethnicity: =================== Hackerdom is
still predominantly male. However the percentage of women is clearly higher
than the low-single-digit range typical for technical professions, and female
hackers are generally respected and dealt with as equals. In the U.S.,
hackerdom is predominantly Caucasian with strong minorities of Jews (east
coast) and Orientals (west coast). The Jewish contingent has exerted a
particularly pervasive cultural influence (see Food, and note that several
common jargon terms are obviously mutated Yiddish). The ethnic distribution
of hackers is understood by them to be a function of which subcultures tend
to seek and value education. Race and ethnic prejudice is notably uncommon
and tends to be met with freezing contempt. When asked, hackers often ascribe
their culture's gender- and color-blindness to a positive effect of text-only
network channels. Religion: ========= Agnostic. Atheist. Non-observant
Jewish. Neo-pagan. Very commonly, three or more of these are combined in the
same person. Conventional faith-holding Christianity is rare though not
unknown (at least on the east coast, more hackers wear yarmulkes than
crucifixes). Even hackers who identify with a religious affiliation tend to
be relaxed about it, hostile to organized religion in general and all forms
of religious bigotry in particular. Many enjoy `parody' religions such as
Discordianism and the Church of the SubGenius. Also, many hackers are
influenced to varying degrees by Zen Buddhism or (less commonly) Taoism, and
blend them easily with their `native' religions. There is a definite strain
of mystical, almost Gnostic sensibility that shows up even among those
hackers not actively involved with neo-paganism, Discordianism, or Zen.
Hacker folklore that pays homage to `wizards' and speaks of incantations and
demons has too much psychological truthfulness about it to be entirely a
joke. Ceremonial chemicals: ===================== Most hackers don't smoke
tobacco and use alcohol in moderation if at all (though there is a visible
contingent of exotic-beer fanciers, and a few hackers are serious
oenophiles). Limited use of non-addictive psychedelic drugs such as
marijuana, LSD, psilocybin, nitrous oxide, etc. used to be relatively common
and is still regarded with more tolerance than in the mainstream culture. Use
of `downers' and opiates, on the other hand, appears to be particularly rare;
hackers seem in general to dislike drugs that `dumb them down'. On the third
hand, many hackers regularly wire up on caffeine and/or sugar for all-night
hacking runs. Communication style: ==================== see the dictionary
notes on `Hacker speech style'. Though hackers often have poor
person-to-person communication skills, they are as a rule extremely sensitive
to nuances of language and very precise in their use of it. They are often
better at written communication than spoken. Geographical Distribution:
========================== In the U.S., hackerdom revolves on a Bay
Area/Boston axis; about half of the hard core seems to live within a hundred
miles of Cambridge (Massachusetts) or Berkeley (California), although there
are significant contigents in Los Angeles, the Pacific Northwest, and
Washington DC. Hackers tend to cluster around large cities, especially
`university towns' such as the Raleigh/Durham area in North Carolina or
Princeton, New Jersey (this may simply reflect the fact that many are
students or ex-students living near their alma maters). Sexual habits:
============== Hackerdom tolerates a much wider range of sexual and lifestyle
variation than the mainstream culture. It includes a relatively large gay
contingent. Hackers are somewhat more likely to live in polygynous or
polyandrous relationships, practice open marriage, or live in communes or
group houses. In this, as in some other respects, (see `General Appearance')
hackerdom semi-consciously maintains `counterculture' values. Personality
Characteristics: ============================ The most obvious common
`personality' characteristics of hackers are high intelligence, consuming
curiosity, and facility with intellectual abstractions. Also, most hackers
are `neophiles', stimulated by and appreciative of novelty (especially
intellectual novelty). Most are also relatively individualistic and
anti-conformist. Contrary to stereotype, hackers are *not* usually
intellectually narrow; they tend to be interested in any subject that can
provide mental stimulation, and can often discourse knowledgeably and even
interestingly on any number of obscure subjects --- assuming you can get them
to talk at all as opposed to, say, going back to hacking. It is noticeable
(and contrary to many outsiders' expectations) that the better a hacker is at
hacking, the more likely he/she is to have outside interests at which he/she
is more than merely competent. Hackers are `control freaks' in a way that has
nothing to do with the usual coercive or authoritarian connotations of the
term. In the same way that children delight in making model trains go forward
and back by moving a switch, hackers love making complicated things like
computers do nifty stuff for them. But it has to be *their* nifty stuff. They
don't like tedium, nondeterminism or most of the fussy, boring, ill-defined
little tasks that go with maintaining a normal existence. Accordingly, they
tend to be careful and orderly in their intellectual lives and chaotic
elsewhere. Their code will be beautiful, even if their desks are buried in
three feet of crap. Hackers are generally only very weakly motivated by
conventional rewards such as social approval or money. They tend to be
attracted by challenges and excited by interesting toys, and to judge the
interest of work or other activities in terms of the challenges offered and
the toys they get to play with. In terms of Myers-Briggs and equivalent
psychometric systems, hackerdom appears to concentrate the relatively rare
INTJ and INTP types; that is, introverted, intuitive, and thinker types (as
opposed to the extroverted-sensate personalities that predominate in the
mainstream culture). ENT[JP] types are also concentrated among hackers but
are in a minority. Weaknesses of the hacker personality:
===================================== Relatively little ability to identify
emotionally with other people. This may be because hackers generally aren't
much like `other people'. Unsurprisingly, there is also a tendency to
self-absorption, intellectual arrogance, and impatience with people and tasks
perceived to be wasting one's time. As a result, many hackers have difficulty
maintaining stable relationships. As cynical as hackers sometimes wax about
the amount of idiocy in the world, they tend by reflex to assume that
everyone is as rational, `cool', and imaginative as they consider themselves.
This bias often contributes to weakness in communication skills. Hackers tend
to be especially poor at confrontations and negotiation. Hackers are often
monumentally disorganized and sloppy about dealing with the physical world.
Bills don't get paid on time, clutter piles up to incredible heights in homes
and offices, and minor maintenance tasks get deferred indefinitely. The sort
of person who uses phrases like `incompletely socialized' usually thinks
hackers are. Hackers regard such people with contempt when they notice them
at all. Miscellaneous: ============== Hackers are more likely to have cats
than dogs (in fact, it is widely grokked that cats have the hacker nature).
Many drive incredibly decrepit heaps and forget to wash them; richer ones
drive spiffy Porsches and RX-7s and then forget to have them washed. Almost
all hackers have terribly bad handwriting, and often grow up block-printing
everything like junior draftsmen. Appendix C: Bibliography
************************ Here are some other books you can read to help you
understand the hacker mindset. Godel, Escher, Bach: An Eternal Golden Braid
Hofstadter, Douglas Basic Books, 1979, New York ISBN 0-394-74502-7 This book
reads like an intellectual Grand Tour of hacker preoccupations. Music,
mathematical logic, programming, speculations on the nature of intelligence,
biology, and Zen are woven into a brilliant tapestry themed on the concept of
encoded self-reference. The perfect left-brain companion to `Illuminatus'.
The Illuminatus Trilogy Shea, Robert & Wilson, Robert Anton Dell Books, 1988,
New York ISBN 0-440-53981-1 This work of alleged fiction is an incredible
berserko-surrealist rollercoaster of world-girdling conspiracies, intelligent
dolphins, the fall of Atlantis, who really killed JFK, sex, drugs, rock &
roll and the Cosmic Giggle Factor. First published in 3 volumes, but there's
now a one-volume trade paperback carried by most chain bookstores under SF.
The perfect right-brain companion to Hofstadter's `Godel, Escher, Bach: An
Eternal Golden Braid'. see {Eris}, {Discordianism}, {random numbers}, {Church
Of The Sub-Genius}. The Hitchhiker's Guide to the Galaxy Douglas Adams Pocket
Books, 1981, New York ISBN 0-671-46149-4 This `Monty-Python-in-Space' spoof
of SF genre traditions has been popular among hackers ever since the original
British radio show. Read it if only to learn about Vogons (see {bogons}) and
the significance of the number 42 (see {random numbers}) --- also why the
winningest chess program of 1990 was called `Deep Thought'. The Tao of
Programming James Geoffrey Infobooks, 1987, Santa Monica ISBN 0-931137-07-1
This gentle, funny spoof of the `Tao Te Ching' contains much that is
illuminating about the hacker way of thought. "When you have learned to
snatch the error code from the trap frame, it will be time for you to leave."
Hackers Steven Levy Anchor/Doubleday 1984, New York ISBN 0-385-19195-2 Levy's
book is at its best in describing the early MIT hackers at the Model Railroad
Club and the early days of the microcomputer revolution. He never understood
UNIX or the networks, though, and his enshrinement of Richard Stallman as
"the last true hacker" turns out (thankfully) to have been quite misleading.
Numerous minor factual errors also mar the text; for example, Levy's claim
that the original Jargon File derived from the TMRC Dictionary (the File
originated at Stanford and was brought to MIT in 1976; the First Edition
co-authors had never seen the dictionary in question). There are also
numerous misspellings in the book that inflame the passions of old-timers; as
Dan Murphy, the author of TECO, once said, "You would have thought he'd take
the trouble to spell the name of a winning editor right." Nevertheless this
remains a useful and stimulating book that captures the feel of several
important hackish subcultures. The Cuckoo's Egg Clifford Stoll Doubleday
1989, New York ISBN 0-385-24946-2 Clifford Stoll's absorbing tale of how he
tracked Markus Hess and the Chaos Club cracking-ring nicely illustrates the
difference between `hacker' and `cracker'. Stoll's portrait of himself, his
lady Martha, and his friends at Berkeley and on the Internet paints a
marvelously vivid picture of how hackers and the people around them like to
live and what they think. The Devil's DP Dictionary by Stan Kelly-Bootle
McGraw-Hill Inc, 1981 ISBN 0-07-034022-6 This pastiche of Ambrose Bierce's
famous work is similar in format to the Jargon File (and quotes several
entries from jargon-1) but somewhat different in tone and intent. It is more
satirical and less anthropological, and largely a product of the author's
literate and quirky imagination. For example, it defines `computer science'
as "A study akin to numerology and astrology, but lacking the precision of
the former and the success of the latter."; also as "The boring art of coping
with a large number of trivialities." The Devouring Fungus: Tales from the
Computer Age by Karla Jennings W. W. Norton 1990, New York ISBN 0-393-30732-8
The author of this pioneering compendium knits together a great deal of
computer and hacker-related folklore with good writing and a few well-chosen
cartoons. She has a keen eye for the human aspects of the lore and is very
good at illuminating the psychology and evolution of hackerdom.
Unfortunately, a number of small errors and awkwardnesses suggest that she
didn't have the final manuscript vetted by a native speaker; the glossary in
the back is particularly embarrassing, and at least one classic tale (the
Magic Switch story in this file's Appendix A) is given in incomplete and
badly mangled form. Nevertheless, this book is a win overall and can be
enjoyed by hacker and non-hacker alike. True Names... and Other Dangers by
Vernor Vinge Baen Books 1987, New York ISBN 0-671-65363 Hacker demigod
Richard Stallman believes the title story of this book "expresses the spirit
of hacking best". This may well be true; it's certainly difficult to recall
anyone doing a better job. The other stories in this collection are also fine
work by an author who is perhaps one of today's very best practitioners of
the hard-SF genre.