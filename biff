 BIFF: /bif/ [USENET] n. The most famous {pseudo}, and the prototypical
{newbie}. Articles from BIFF are characterized by all upper case letters
sprinkled liberally with bangs, typos, `cute' misspellings (EVRY BUDY LUVS
GOOD OLD BIFF CUZ HE"S A K00L DOOD AN HE RITES REEL AWESUM THINGZ IN CAPITULL
LETTRS LIKE THIS!!!), use (and often misuse) of fragments of {talk mode}
abbreviations, a long {sig block} (sometimes even a {doubled sig}), and
unbounded naivete. BIFF posts articles using his elder brother's VIC-20.
BIFF's location is a mystery, as his articles appear to come from a variety
of sites. However, {BITNET} seems to be the most frequent origin. The theory
that BIFF is a denizen of BITNET is supported by BIFF's (unfortunately
invalid) electronic mail address: BIFF@BIT.NET. biff: /bif/ vt. To notify
someone of incoming mail; from the BSD utility `biff(1)' which was in turn
named after the implementor's dog (it barked whenever the mailman came). Big
Grey Wall: n. What greets a {VMS} user searching for documentation. A full
VMS kit comes on a pallet, the documentation taking up around 15 feet of
shelf space before adding layered products such as compilers, databases,
multivendor networking, programming tools, etc. Recent (since VMS V5) DEC
documentation comes with grey binders; under VMS V4 the binders were orange
(`big orange wall'), and under V3 they were blue. see {VMS}. big iron: n.
Large, expensive, ultra-fast computers. Used generally of {number-crunching}
supercomputers such as Crays, but can include more conventional big
commercial IBMish mainframes. Term of approval; compare {heavy metal}, oppose
{dinosaur}. Big Red Switch: [IBM] n. The power switch on a computer, esp. the
`Emergency Pull' switch on an IBM {mainframe} or the power switch on an IBM
PC where it really is large and red. "This !@%$% {bitty box} is hung again;
time to hit the Big Red Switch." Sources at IBM report that, in tune with the
company's passion for {TLA}s, this is often acronymized as `BRS' (this has
also become established on FidoNet and in the PC {clone} world). It is
alleged that the emergency pull switch on an IBM 360/91 actually fired a
non-conducting bolt into the main power feed; the BRSes on more recent
machines physically drop a block into place so that they can't be pushed back
in. People get fired for pulling them, especially inappropriately (see also
{molly-guard}). Compare {power cycle}, {three-finger salute}. big win: n.
Serendipity. "Yes, those two physicists discovered high-temperature
superconductivity in a batch of ceramic that had been prepared incorrectly
according to their experimental schedule. Small mistake; big win!" To `win
big' (vi.) is to experience serendipity. "I went shopping and won big; there
was a two-for-one sale." see {win}. big-endian: [From Swift's `Gulliver's
Travels' via a famous paper `On Holy Wars and a Plea for Peace' by Danny
Cohen, USC/ISI IEN 137 dated 1 April 1980] 1. adj. Describes a computer
architecture in which, within a given multi-byte numeric representation, the
most significant byte comes first (the word is stored `big-end-first'). Most
processors including the IBM 370 family and the {PDP-10}, and Motorola
microprocessor families and most of the various RISC designs current in
mid-1991 are big-endian. see {little-endian}, {middle-endian}, {NUXI
problem}. 2. adj. An {{Internet address}} the wrong way round. Most of the
world follows the Internet standard and writes email addresses starting with
the name of the computer and ending up with the name of the country. In the
UK the Joint Networking Team decided to do it the other way round; e.g.
`me@uk.ac.wigan.cs'. Most gateway sites have {ad-hockery} in their mailers to
handle this, but can still be confused. In particular the address above could
be in the UK (code `uk') or Czechoslovakia (code `cs'). bignum: /big'nuhm/
[orig. from MIT MacLISP] n. 1. [techspeak] A multiple-precision computer
representation for very large integers. More generally, any very large
number. "Have you ever looked at the United States Budget? There's bignums
for you!" 2. [Stanford] n. In backgammon, large numbers on the dice are
called `bignums', especially a roll of double fives or double sixes. see also
{El Camino Bignum}. Sense #1 may require some explanation. Most computer
languages provide a kind of data called `integer', but such computer integers
are usually very limited in size; usually they must be smaller than 2 ^ 31
(2,147,483,648) or (on a losing {bitty box}) 2 ^ 15 (32,768). If you want to
work with numbers larger than that, you have to use floating-point numbers,
which are usually accurate to only six or seven decimal places. Computer
languages that provide bignums can perform exact calculations on very large
numbers, such as 1000! (the factorial of 1000, which is 1000 times 999 times
998 times ... times 2 times 1). For example, this value for 1000! was
computed by the MacLISP system using bignums:
40238726007709377354370243392300398571937486421071
46325437999104299385123986290205920442084869694048
00479988610197196058631666872994808558901323829669
94459099742450408707375991882362772718873251977950
59509952761208749754624970436014182780946464962910
56393887437886487337119181045825783647849977012476
63288983595573543251318532395846307555740911426241
74743493475534286465766116677973966688202912073791
43853719588249808126867838374559731746136085379534
52422158659320192809087829730843139284440328123155
86110369768013573042161687476096758713483120254785
89320767169132448426236131412508780208000261683151
02734182797770478463586817016436502415369139828126
48102130927612448963599287051149649754199093422215
66832572080821333186116811553615836546984046708975
60290095053761647584772842188967964624494516076535
34081989013854424879849599533191017233555566021394
50399736280750137837615307127761926849034352625200
01588853514733161170210396817592151090778801939317
81141945452572238655414610628921879602238389714760
88506276862967146674697562911234082439208160153780
88989396451826324367161676217916890977991190375403
12746222899880051954444142820121873617459926429565
81746628302955570299024324153181617210465832036786
90611726015878352075151628422554026517048330422614
39742869330616908979684825901254583271682264580665
26769958652682272807075781391858178889652208164348
34482599326604336766017699961283186078838615027946
59551311565520360939881806121385586003014356945272
24206344631797460594682573103790084024432438465657
24501440282188525247093519062092902313649327349756
55139587205596542287497740114133469627154228458623
77387538230483865688976461927383814900140767310446
64025989949022222176590433990188601856652648506179
97023561938970178600408118897299183110211712298459
01641921068884387121855646124960798722908519296819
37238864261483965738229112312502418664935314397013
74285319266498753372189406942814341185201580141233
44828015051399694290153483077644569099073152433278
28826986460278986432113908350621709500259738986355
42771967428222487575867657523442202075736305694988
25087968928162753848863396909959826280956121450994
87170124451646126037902930912088908694202851064018
21543994571568059418727489980942547421735824010636
77404595741785160829230135358081840096996372524230
56085590370062427124341690900415369010593398383577
79394109700277534720000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000 000000000000000000. bigot:
n. A person who is religiously attached to a particular computer, language,
operating system, editor or other tool (see {religious issues}). Usually
found with a specifier; thus, `cray bigot', `APL bigot', `VMS bigot', `EMACS
bigot'. True bigots can be distinguished from mere partisans or zealots by
the fact that they refuse to learn alternatives even when the march of time
and/or technology is threatening to obsolete the favored tool. It is said
"You can tell a bigot, but you can't tell him much." Compare {weenie}. bit:
[from the mainstream meaning and `binary digit'] n. 1. [techspeak] The unit
of information; the amount of information obtained by asking a yes-or-no
question for which the two outcomes are equally probable 2. [techspeak] A
computational quantity that can take on one of two values, such as true and
false, or zero and one. 3. A mental flag: a reminder that something should be
done eventually. Example: "I have a bit set for you." (I haven't seen you for
a while, and I'm supposed to tell or ask you something.) 4. More generally, a
(possibly incorrect) mental state of belief. Example: "I have a bit set that
says that you were the last guy to hack on EMACS." (Meaning, "I think you
were the last guy who hacked on EMACS, and what I am about to say is
predicated on this, so please stop me if this isn't true.") "I just need one
bit from you" is a polite way of indicating that you intend only a short
interruption for a question which can presumably be answered with a yes or
no. A bit is said to be `set' if its value is true or one, and `reset' or
`clear' if its value is false or zero. One speaks of setting and clearing
bits. To `toggle' or `invert' a bit is to change it, either from zero to one
or from one to zero. see also {flag}, {trit}, {mode bit}. bit bang: n.
Transmission of data on a serial line, when accomplished by rapidly tweaking
a single output bit at the appropriate times (popular on certain early models
of Prime computers, presumably when UARTs were too expensive, and on archaic
Z80 micros with a Zilog PIO but no SIO). The technique is a simple loop with
eight OUT and SHIFT instruction pairs for each byte. Input is more
interesting. And full duplex (doing input and output at the same time) is one
way to separate the real hackers from the {wannabee}s. bit bashing: n. (also,
`bit diddling' or {bit twiddling}) Term used to describe any of several kinds
of low-level programming characterized by manipulation of {bit}, {flag},
{nybble} and other smaller-than-character-sized pieces of data: these include
low-level device control, encryption algorithms, checksum and
error-correcting codes, hash functions, some flavors of graphics programming
(see {bitblt}), and assembler/compiler code generation. May connote either
tedium or a real technical challenge (more usually the former). "The command
decoding for the new tape driver looks pretty solid but the bit-bashing for
the control registers still has bugs." see also {bit bang}, {mode bit}. bit
bucket: n. 1. The universal data sink (originally, the mythical receptacle
used to catch bits when they fall off the end of a register during a shift
instruction). Data that is discarded, lost, or destroyed is said to `go to
the bit bucket'. On {UNIX}, often used for {/dev/null}. Sometimes amplified
as `the Great Bit Bucket in the Sky'. 2. The place where all lost mail and
news messages eventually go. The selection is performed according to
{Murphy's Law}; important mail is much more likely to end in the bit bucket
than junk mail, which has almost 100% probability of getting delivered.
Routing to the bit bucket is automatically performed by the mail transfer
agents, news systems and the lower layers of the network. 3. The ideal
location for all unwanted mail responses, e.g "Flames about this article to
/dev/null." Such a request is guaranteed to overflow one's mailbox with
flames. 4. Excuse for all mail that has not been sent. Example: "I mailed you
those figures last week, they must have ended in the bit bucket." This term
is used purely in jest. It's based on the fanciful notion that bits are
objects that are not destroyed, but only misplaced. This appears to have been
a mutation of an earlier term `bit box', about which the same legend was
current; old-time hackers also report that trainees used to be told that when
the CPU stored bits into memory it was actually pulling them "out of the bit
box". see also {chad box}, {null device}. Another variant of this legend has
it that due to the `parity preservation law' the number of 1 (one) bits that
end into the bit bucket must equal the number of 0 (zero) bits. Any imbalance
results in bits filling up the bit bucket. A qualified computer techinician
can empty a full bit bucket as part of scheduled maintenance. bit decay: n.
see {bit rot}. People with a physics background tend to prefer this one for
the analogy with particle decay. see also {computron}, {quantum
bogodynamics}. bit rot: n. Also {bit decay}. Hypothetical disease the
existence of which has been deduced from the observation that unused programs
or features will often stop working after sufficient time has passed, even if
`nothing has changed'. The theory explains that bits decay as if they were
radioactive. As time passes, the contents of a file or the code in a program
will become increasingly garbled. There actually are physical processes that
produce such effects (alpha particles generated by trace radionuclides in
ceramic chip packages, for example, can change the contents of a computer
memory unpredictably, and various kinds of subtle media failures can corrupt
files in mass storage) but they are quite rare (and computers are built with
error-detecting circuitry to compensate for them). The notion long favored
among hackers that {cosmic rays} are among the causes of such events turns
out however to be a myth; see the {cosmic rays} entry. The term {software
rot} is almost synonymous. Software rot is the effect, bit rot the notional
cause. bit twiddling: n. 1. (pejorative) An exercise in {tuning} in which
incredible amounts of time and effort go to produce little noticeable
improvement, with the frequent result that the code has become
incomprehensible. 2. aimless small modification to a program, esp. for some
pointless goal. 3. Approx. syn. for {bit bashing}; esp. used for the act of
frobbing the device control register of a peripheral in an attempt to get it
back to a known state. bit-paired keyboard: n. obs. A non-standard keyboard
layout which seems to have originated with the Teletype ASR-33 and remained
common for several years on early computer equipment. The ASR-33 was a
mechanical device (see {EOU}), so the only way to generate the character
codes from keystrokes was by some physical linkage. The design of the ASR-33
assigned each character key a basic pattern which could be modified by
flipping bits if the SHIFT or CTRL key were pressed. In order to avoid making
the thing more of a Rube Goldberg kluge than it already was, the design had
to group characters which shared the same basic bit pattern on one key.
Looking at the ASCII chart, we find: 3 high 4 low bits bits 0000 0001 0010
0011 0100 0101 0110 0111 1000 1001 010 space ! " # $ % & ' ( ) 011 0 1 2 3 4
5 6 7 8 9 That's why the characters !"#$%&'() appear where they do on a
Teletype. This was *not* the weirdest variant of the {QWERTY} layout widely
seen, by the way; that prize should probably go to one of several (differing)
arrangements on IBM's even clunkier 026 and 029 card punches. When electronic
terminals became popular in the early 1970s there was no agreement in the
industry over how the keyboards should be laid out. Some vendors opted to
emulate the Teletype keyboard, while others used the flexibility of
electronic circuitry to make their product look like an office typewriter.
These alternatives became known as `bit-paired' and `typewriter-paired'
keyboards. To a hacker, the bit-paired keyboard seemed far more logical ---
and because most hackers in those days had never learned to touch-type, there
was little pressure from the pioneering users to adapt keyboards to the
typewriter standard. The doom of the bit-paired keyboard was the large-scale
introduction of the computer terminal into the normal office environment,
where out-and-out technophobes were expected to use the equipment. The
`typewriter-paired' standard became universal, `bit-paired' hardware was
quickly junked or relegated to dusty corners, and both terms passed into
disuse. bitblt: /bit'blit/ n. [from {BLT}, q.v.] 1. Any of a closely related
family of algorithms for moving and copying rectangles of bits between main
and display memory on a bit-mapped device, or between two areas of either
main or display memory (the requirement to do the {Right Thing} in the case
of overlapping source and destination rectangles is what makes BitBlt
tricky). 2. Synonym for {blit} or {BLT}. Both uses are borderline techspeak.