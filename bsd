 BSD: /B-S-D/ n. [acronym for `Berkeley System Distribution'] a family of
{{UNIX}} versions for the DEC {VAX} and PDP-11 developed by Bill Joy and
others at {Berzerkeley} starting around 1980, incorporating paged virtual
memory, TCP/IP networking enhancements, and many other features. The BSD
versions (4.1, 4.2, and 4.3) and the commercial versions derived from them
(SunOS, ULTRIX, and Mt. Xinu) held the technical lead in the UNIX world until
AT&T's successful standardization efforts after about 1986, and are still
widely popular. see {{UNIX}}, {USG UNIX}. bubble sort: n. Techspeak for a
particular sorting technique in which pairs of adjacent values in the list to
be sorted are compared and interchanged if they are out of order; thus, list
entries `bubble upward' in the list until they bump into one with a lower
sort value. Because it is not very good relative to other methods and is the
one typically stumbled on by {na"ive} and untutored programmers, hackers
consider it the {canonical} example of a na"ive algorithm. The canonical
example of a really *bad* algorithm is {bogo-sort}. A bubble sort might be
used out of ignorance, but any use of bogo-sort could issue only from brain
damage or willful perversity. bucky bits: /buh'kee bits/ n. 1. obs. The bits
produced by the CONTROL and META shift keys on a SAIL keyboard, resulting in
a 9-bit keyboard character set. The MIT AI TV (Knight) keyboards extended
this with TOP and separate left and right CONTROL and META keys, resulting in
a 12-bit character set; later, LISP Machines added such keys as SUPER, HYPER,
and GREEK (see {space-cadet keyboard}). 2. By extension, bits associated with
`extra' shift keys on any keyboard, e.g., the ALT on an IBM PC or command and
option keys on a Macintosh. It is rumored that `bucky bits' were named for
Buckminster Fuller during a period when he was consulting at Stanford.
Actually, `Bucky' was Niklaus Wirth's nickname when *he* was at Stanford; he
first suggested the idea of an EDIT key to set the 8th bit of an otherwise
7-bit ASCII character. This was used in a number of editors written at
Stanford or in its environs (TV-EDIT and NLS being the best-known). The term
spread to MIT and CMU early and is now in general use. see {double bucky},
{quadruple bucky}. buffer overflow: n. What happens when you try to stuff
more data into a buffer (holding area) than it can handle. This may be due to
a mismatch in the processing rates of the producing and consuming processes
(see {overrun}), or because the buffer is simply too small to hold all the
data that must accumulate before a piece of it can be processed. For example,
in a text-processing tool that {crunch}es a line at a time, a short line
buffer can result in {lossage} as input from a long line overflows the buffer
and trashes data beyond it. Good defensive programming would check for
overflow on each character and stop accepting data when the buffer is full
up. The term is used of and by humans in a metaphorical sense. "What time did
I agree to meet you? My buffer must have overflowed." Or "If I answer that
phone my buffer is going to overflow." see also {spam}, {overrun screw}. bug:
n. An unwanted and unintended property of a program or hardware, esp. one
that causes it to malfunction. Antonym of {feature}. Examples: "There's a bug
in the editor: it writes things out backwards." "The system crashed because
of a hardware bug." "Fred is a winner, but he has a few bugs" (i.e., Fred is
a good guy, but he has a few personality problems). Historical note: Some
have said this term came from telephone company usage, in which "bugs in a
telephone cable" were blamed for noisy lines, but this appears to be an
incorrect folk etymology. Admiral Grace Hopper (an early computing pioneer
better known for inventing {COBOL}) liked to tell a story in which a
technician solved a persistent {glitch} in the Harvard Mark II machine by
pulling an actual insect out from between the contacts of one of its relays,
and she subsequently promulgated {bug} in its hackish sense as a joke about
the incident (though, as she was careful to admit, she was not there when it
happened). For many years the logbook associated with the incident and the
actual bug in question (a moth) sat in a display case at the Naval Surface
Warfare Center. The entire story, with a picture of the logbook and the moth
taped into it, is recorded in the `Annals of the History of Computing', Vol.
3, No. 3 (July 1981), pp. 285--286. The text of the log entry (from September
9, 1945), reads "1545 Relay #70 Panel F (moth) in relay. First actual case of
bug being found". This wording seems to establish that the term was already
in use at the time in its current specific sense. Indeed, the use of `bug' to
mean an industrial defect was already established in Thomas Edison's time,
and `bug' in the sense of an disruptive event goes back to Shakespeare! In
the first edition of Samuel Johnson's dictionary one meaning of `bug' is "A
frightful object; a walking spectre"; this is traced to `bugbear', a Welsh
term for a variety of mythological monster which (to complete the circle) has
recently been reintroduced into the popular lexicon through fantasy
role-playing games. In any case, in jargon the word almost never refers to
insects. Here is a plausible conversation that never actually happened:
"There is a bug in this ant farm!" "What do you mean? I don't see any ants in
it." "That's the bug." [There has been a widespread myth that the original
bug was moved to the Smithsonian, and an earlier version of this entry so
asserted. A correspondent who thought to check discovered that the bug was
not there. While investigating this, your editor discovered that the NSWC
still had the bug, but had unsuccessfully tried to get the Smithsonian to
accept it --- and that the present curator of the History of American
Technology Museum didn't know this and agreed that it would make a worthwhile
exhibit. Thus, the process of investigating the original-computer-bug bug may
have fixed it in an entirely unexpected way, by making the myth true! ---
ESR] bug-compatible: adj. Said of a design or revision that has been badly
compromised by a requirement to be compatible with {fossil}s or {misfeature}s
in other programs or (esp.) previous releases of itself. "MS-DOS 2.0 used \
as a path separator to be bug-compatible with some cretin's choice of / as an
option character in 1.0." bug-for-bug compatible: n. Same as
{bug-compatible}, with the additional implication that much tedious effort
went into ensuring that each (known) bug was replicated. buglix: /buhg'liks/
n. Pejorative term referring to DEC's ULTRIX operating system in its earlier
*severely* buggy versions. Still used to describe ULTRIX, but without venom.
Compare {HP-SUX}. bulletproof: adj. Used of an algorithm or implementation
considered extremely {robust}; lossage-resistant; capable of correctly
recovering from any imaginable exception condition. This is a rare and valued
quality. Syn. {armor-plated}. bum: 1. vt. To make highly efficient, either in
time or space, often at the expense of clarity. "I managed to bum three more
instructions out of that code." "I spent half the night bumming the interrupt
code." 2. To squeeze out excess; to remove something in order to improve
whatever it was removed from (without changing function; this distinguishes
the process from a {featurectomy}). 3. n. A small change to an algorithm,
program, or hardware device to make it more efficient. "This hardware bum
makes the jump instruction faster." Usage: now uncommon, largely superseded
by v. {tune} (and n. {tweak}, {hack}), though none of these exactly capture
sense 2. All these uses are rare in Commonwealth hackish, because in the
parent dialects of English `bum' is a rude synonym for `buttocks'. bump: vt.
Synonym for increment. Has the same meaning as C's ++ operator. Used esp. of
counter variables, pointers, and index dummies in `for', `while', and
`do-while' loops. burble: [from Lewis Carroll's "Jabberwocky"] v. Like
{flame}, but connotes that the source is truly clueless and ineffectual (mere
flamers can be competent). A term of deep contempt. "There's some guy on the
phone burbling about how he got a DISK FULL error and it's all our comm
software's fault." buried treasure: n. A surprising piece of code found in
some program. While usually not wrong, it tends to vary from {crufty} to
{bletcherous}, and has lain undiscovered only because it was functionally
correct, however horrible it is. Used sarcastically, because what is found is
anything *but* treasure. Buried treasure almost always needs to be dug up and
removed. "I just found that the scheduler sorts its queue using {bubble
sort}! Buried treasure!" burn-in period: n. 1. A factory test designed to
catch systems with {marginal} components before they get out the door; the
theory is that burn-in will protect customers by outwaiting the steepest part
of the {bathtub curve} (see {infant mortality}). 2. A period of indeterminate
length in which a person using a computer is so intensely involved in his
project that he forgets basic needs such as food, drink, sleep, etc. Warning:
Excessive burn-in can lead to burn-out. see {hack mode}, {larval stage}.
burst page: n. Syn. {banner}, sense 1. busy-wait: vi. Used of human behavior,
conveys that the subject is busy waiting for someone or something, intends to
move instantly as soon as it shows up, and thus cannot do anything else at
the moment. "Can't talk now, I'm busy-waiting till Bill gets off the phone."
Technically, `busy-wait' means to wait on an event by {spin}ning through a
tight or timed-delay loop that polls for the event on each pass, as opposed
to setting up an interrupt handler and continuing execution on another part
of the task. This is a wasteful technique, best avoided on time-sharing
systems where a busy-waiting program may {hog} the processor. buzz: vi. 1. Of
a program, to run with no indication of progress and perhaps without
guarantee of ever finishing; esp. said of programs thought to be executing
tight loops of code. A program that is buzzing appears to be {catatonic}, but
you never get out of catatonia, while a buzzing loop may eventually end of
its own accord. "The program buzzes for about 10 seconds trying to sort all
the names into order." see {spin}; see also {grovel}. 2. [ETA Systems] To
test a wire or printed circuit trace for continuity by applying an AC rather
than DC signal. Some wire faults will pass DC tests but fail a buzz test. 3.
To process an array or list in sequence, doing the same thing to each
element. "This loop buzzes through the tz array looking for a terminator
type."