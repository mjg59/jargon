 CD drive itself. So called because of a common tech support legend about the
idiot who called to complain that the cup holder on his computer broke. A
joke program was once distributed around the net called "cupholder.exe",
which when run simply extended the CD drive tray. The humor of this was of
course lost on people whose drive had a slot or a caddy instead. :cursor
dipped in X: n. There are a couple of metaphors in English of the form `pen
dipped in X' (perhaps the most common values of X are `acid', `bile', and
`vitriol'). These map over neatly to this hackish usage (the cursor being
what moves, leaving letters behind, when one is composing on-line). "Talk
about a {nastygram}! He must've had his cursor dipped in acid when he wrote
that one!" :cuspy: /kuhs'pee/ adj. [WPI: from the {DEC} abbreviation CUSP,
for `Commonly Used System Program', i.e., a utility program used by many
people] 1. (of a program) Well-written. 2. Functionally excellent. A program
that performs well and interfaces well to users is cuspy. see {rude}. 3.
[NYU] Said of an attractive woman, especially one regarded as available.
Implies a certain curvaceousness. :cut a tape: vi. To write a software or
document distribution on magnetic tape for shipment. Has nothing to do with
physically cutting the medium! Early versions of this lexicon claimed that
one never analogously speaks of `cutting a disk', but this has since been
reported as live usage. Related slang usages are mainstream business's `cut a
check', the recording industry's `cut a record', and the military's `cut an
order'. All of these usages reflect physical processes in obsolete recording
and duplication technologies. The first stage in manufacturing an old-style
vinyl record involved cutting grooves in a stamping die with a precision
lathe. More mundanely, the dominant technology for mass duplication of paper
documents in pre-photocopying days involved "cutting a stencil", punching
away portions of the wax overlay on a silk screen. More directly, paper tape
with holes punched in it was an important early storage medium. :cybercrud:
/si:'ber-kruhd/ n. 1. [coined by Ted Nelson] Obfuscatory tech-talk. Verbiage
with a high {MEGO} factor. The computer equivalent of bureaucratese. 2.
Incomprehensible stuff embedded in email. First there were the "Received"
headers that show how mail flows through systems, then MIME (Multi-purpose
Internet Mail Extensions) headers and part boundaries, and now huge blocks of
radix-64 for PEM (Privacy Enhanced Mail) or PGP (Pretty Good Privacy) digital
signatures and certificates of authenticity. This stuff all services a
purpose and good user interfaces should hide it, but all too often users are
forced to wade through it. :cyberpunk: /si:'ber-puhnk/ n.,adj. [orig. by SF
writer Bruce Bethke and/or editor Gardner Dozois] A subgenre of SF launched
in 1982 by William Gibson's epoch-making novel "Neuromancer" (though its
roots go back through Vernor Vinge's "True Names" (see the {Bibliography} in
Appendix C) to John Brunner's 1975 novel "The Shockwave Rider"). Gibson's
near-total ignorance of computers and the present-day hacker culture enabled
him to speculate about the role of computers and hackers in the future in
ways hackers have since found both irritatingly nai"ve and tremendously
stimulating. Gibson's work was widely imitated, in particular by the
short-lived but innovative "Max Headroom" TV series. see {cyberspace}, {ice},
{jack in}, {go flatline}. Since 1990 or so, popular culture has included a
movement or fashion trend that calls itself `cyberpunk', associated
especially with the rave/techno subculture. Hackers have mixed feelings about
this. On the one hand, self-described cyberpunks too often seem to be shallow
trendoids in black leather who have substituted enthusiastic blathering about
technology for actually learning and _doing_ it. Attitude is no substitute
for competence. On the other hand, at least cyberpunks are excited about the
right things and properly respectful of hacking talent in those who have it.
The general consensus is to tolerate them politely in hopes that they'll
attract people who grow into being true hackers. :cyberspace: /si:'br-spays`/
n. 1. Notional `information-space' loaded with visual cues and navigable with
brain-computer interfaces called `cyberspace decks'; a characteristic prop of
{cyberpunk} SF. Serious efforts to construct {virtual reality} interfaces
modeled explicitly on Gibsonian cyberspace are under way, using more
conventional devices such as glove sensors and binocular TV headsets. Few
hackers are prepared to deny outright the possibility of a cyberspace someday
evolving out of the network (see {the network}). 2. The Internet or {Matrix}
(sense #2) as a whole, considered as a crude cyberspace (sense 1). Although
this usage became widely popular in the mainstream press during 1994 when the
Internet exploded into public awareness, it is strongly deprecated among
hackers because the Internet does not meet the high, SF-inspired standards
they have for true cyberspace technology. Thus, this use of the term usually
tags a {wannabee} or outsider. Oppose {meatspace}. 3. Occasionally, the
metaphoric location of the mind of a person in {hack mode}. Some hackers
report experiencing strong eidetic imagery when in hack mode; interestingly,
independent reports from multiple sources suggest that there are common
features to the experience. In particular, the dominant colors of this
subjective `cyberspace' are often gray and silver, and the imagery often
involves constellations of marching dots, elaborate shifting patterns of
lines and angles, or moire patterns. :cycle: 1. n. The basic unit of
computation. What every hacker wants more of (noted hacker Bill Gosper
described himself as a "cycle junkie"). One can describe an instruction as
taking so many `clock cycles'. Often the computer can access its memory once
on every clock cycle, and so one speaks also of `memory cycles'. These are
technical meanings of {cycle}. The jargon meaning comes from the observation
that there are only so many cycles per second, and when you are sharing a
computer the cycles get divided up among the users. The more cycles the
computer spends working on your program rather than someone else's, the
faster your program will run. That's why every hacker wants more cycles: so
he can spend less time waiting for the computer to respond. 2. By extension,
a notional unit of _human_ thought power, emphasizing that lots of things
compete for the typical hacker's think time. "I refused to get involved with
the Rubik's Cube back when it was big. Knew I'd burn too many cycles on it if
I let myself." 3. vt. Syn. {bounce} (sense 4), {120 reset}; from the phrase
`cycle power'. "Cycle the machine again, that serial port's still hung."
:cycle crunch: n.,obs. A situation wherein the number of people trying to use
a computer simultaneously has reached the point where no one can get enough
cycles because they are spread too thin and the system has probably begun to
{thrash}. This scenario is an inevitable result of Parkinson's Law applied to
timesharing. Usually the only solution is to buy more computer. Happily, this
has rapidly become easier since the mid-1980s, so much so that the very term
`cycle crunch' now has a faintly archaic flavor; most hackers now use
workstations or personal computers as opposed to traditional timesharing
systems, and are far more likely to complain of `bandwidth crunch' on their
shared networks rather than cycle crunch. :cycle drought: n. A scarcity of
cycles. It may be due to a {cycle crunch}, but it could also occur because
part of the computer is temporarily not working, leaving fewer cycles to go
around. "The {high moby} is {down}, so we're running with only half the usual
amount of memory. There will be a cycle drought until it's fixed." :cycle of
reincarnation: n. see {wheel of reincarnation}. :cycle server: n. A powerful
machine that exists primarily for running large compute-, disk-, or
memory-intensive jobs (more formally called a `compute server'). Implies that
interactive tasks such as editing are done on other machines on the network,
such as workstations. :cypherpunk: n. [from {cyberpunk}] Someone interested
in the uses of encryption via electronic ciphers for enhancing personal
privacy and guarding against tyranny by centralized, authoritarian power
structures, especially government. There is an active cypherpunks mailing
list at <cypherpunks-request@toad.com> coordinating work on public-key
encryption freeware, privacy, and digital cash. see also {tentacle}. :C|N>K:
n. [Usenet] Coffee through Nose to Keyboard; that is, "I laughed so hard I
{snarf}ed my coffee onto my keyboard.". Common on alt.fan.pratchett and
{scary devil monastery}; recognized elsewhere. The Acronymphomania FAQ
(http://www.lspace.org/faqs/acronym-faq.g.html) on alt.fan.pratchett
recognizes variants such as T|N>K = `Tea through Nose to Keyboard' and C|N>S
= `Coffee through Nose to Screen'. = D = ===== :D. C. Power Lab: n. The
former site of {{SAIL}}. Hackers thought this was very funny because the
obvious connection to electrical engineering was nonexistent -- the lab was
named for a Donald C. Power. Compare {Marginal Hacks}. :daemon: /day'mn/ or
/dee'mn/ n. [from the mythological meaning, later rationalized as the acronym
`Disk And Execution MONitor'] A program that is not invoked explicitly, but
lies dormant waiting for some condition(s) to occur. The idea is that the
perpetrator of the condition need not be aware that a daemon is lurking
(though often a program will commit an action only because it knows that it
will implicitly invoke a daemon). For example, under {{ITS}} writing a file
on the {LPT} spooler's directory would invoke the spooling daemon, which
would then print the file. The advantage is that programs wanting (in this
example) files printed need neither compete for access to nor understand any
idiosyncrasies of the {LPT}. They simply enter their implicit requests and
let the daemon decide what to do with them. Daemons are usually spawned
automatically by the system, and may either live forever or be regenerated at
intervals. Daemon and {demon} are often used interchangeably, but seem to
have distinct connotations. The term `daemon' was introduced to computing by
{CTSS} people (who pronounced it /dee'mon/) and used it to refer to what ITS
called a {dragon}; the prototype was a program called DAEMON that
automatically made tape backups of the file system. Although the meaning and
the pronunciation have drifted, we think this glossary reflects current
(2000) usage. :daemon book: n. "The Design and Implementation of the 4.3BSD
UNIX Operating System", by Samuel J. Leffler, Marshall Kirk McKusick, Michael
J. Karels, and John S. Quarterman (Addison-Wesley Publishers, 1989, ISBN
0-201-06196-1); or "The Design and Implementation of the 4.4 BSD Operating
System" by Marshall Kirk McKusick, Keith Bostic, Michael J. Karels and John
S. Quarterman (Addison-Wesley Longman, 1996, SBN 0-201-54979-4) Either of the
standard reference books on the internals of {BSD} Unix. So called because
the covers have a picture depicting a little devil (a visual play on
{daemon}) in sneakers, holding a pitchfork (referring to one of the
characteristic features of Unix, the `fork(2)' system call). Also known as
the {Devil Book}. :dahmum: /dah'mum/ n. [Usenet] The material of which
protracted {flame war}s, especially those about operating systems, is
composed. Homeomorphic to {spam}. The term `dahmum' is derived from the name
of a militant {OS/2} advocate, and originated when an extensively crossposted
OS/2-versus-{Linux} debate was fed through {Dissociated Press}. :dancing
frog: n. [Vancouver area] A problem that occurs on a computer that will not
reappear while anyone else is watching. From the classic Warner Brothers
cartoon "One Froggy Evening", featuring a dancing and singing Michigan J.
Frog that just croaks when anyone else is around (now the WB network mascot).
:dangling pointer: n. [common] A reference that doesn't actually lead
anywhere (in C and some other languages, a pointer that doesn't actually
point at anything valid). Usually this happens because it formerly pointed to
something that has moved or disappeared. Used as jargon in a generalization
of its techspeak meaning; for example, a local phone number for a person who
has since moved to the other coast is a dangling pointer. Compare {dead
link}. :dark-side hacker: n. A criminal or malicious hacker; a {cracker}.
From George Lucas's Darth Vader, "seduced by the dark side of the Force". The
implication that hackers form a sort of elite of technological Jedi Knights
is intended. Oppose {samurai}. :Datamation: /day`t*-may'sh*n/ n. A magazine
that many hackers assume all {suit}s read. Used to question an unbelieved
quote, as in "Did you read that in `Datamation?'" (But see below; this slur
may be dated by the time you read this.) It used to publish something
hackishly funny every once in a while, like the original paper on {COME FROM}
in 1973, and Ed Post's "Real Programmers Don't Use Pascal" ten years later,
but for a long time after that it was much more exclusively {suit}-oriented
and boring. Following a change of editorship in 1994, Datamation is trying
for more of the technical content and irreverent humor that marked its early
days. Datamation now has a WWW page at `http://www.datamation.com' worth
visiting for its selection of computer humor, including "Real Programmers
Don't Use Pascal" and the `Bastard Operator From Hell' stories by Simon
Travaglia (see {BOFH}). :DAU: /dow/ n. [German FidoNet] German acronym for
Du"mmster Anzunehmender User (stupidest imaginable user). From the
engineering-slang GAU for Gro"sster Anzunehmender Unfall, worst assumable
accident, esp. of a LNG tank farm plant or something with similarly
disastrous consequences. In popular German, GAU is used only to refer to
worst-case nuclear acidents such as a core meltdown. see {cretin}, {fool},
{loser} and {weasel}. :Dave the Resurrector: n. [Usenet; also abbreviated
DtR] A {cancelbot} that cancels cancels. Dave the Resurrector originated when
some {spam}-spewers decided to try to impede spam-fighting by wholesale
cancellation of anti-spam coordination messages in the
news.admin.net-abuse.usenet newsgroup. :day mode: n. see {phase} (sense 1).
Used of people only. :dd: /dee-dee/ vt. [Unix: from IBM {JCL}] Equivalent to
{cat} or {BLT}. Originally the name of a Unix copy command with special
options suitable for block-oriented devices; it was often used in
heavy-handed system maintenance, as in "Let's `dd' the root partition onto a
tape, then use the boot PROM to load it back on to a new disk". The Unix
`dd(1)' was designed with a weird, distinctly non-Unixy keyword option syntax
reminiscent of IBM System/360 JCL (which had an elaborate DD `Dataset
Definition' specification for I/O devices); though the command filled a need,
the interface design was clearly a prank. The jargon usage is now very rare
outside Unix sites and now nearly obsolete even there, as `dd(1)' has been
{deprecated} for a long time (though it has no exact replacement). The term
has been displaced by {BLT} or simple English `copy'. :DDT: /D-D-T/ n. [from
the insecticide para-dichloro-diphenyl-trichloroethene] 1. Generic term for a
program that assists in debugging other programs by showing individual
machine instructions in a readable symbolic form and letting the user change
them. In this sense the term DDT is now archaic, having been widely displaced
by `debugger' or names of individual programs like `adb', `sdb', `dbx', or
`gdb'. 2. [ITS] Under MIT's fabled {{ITS}} operating system, DDT (running
under the alias HACTRN, a six-letterism for `Hack Translator') was also used
as the {shell} or top level command language used to execute other programs.
3. Any one of several specific DDTs (sense 1) supported on early {DEC}
hardware and CP/M. The PDP-10 Reference Handbook (1969) contained a footnote
on the first page of the documentation for DDT that illuminates the origin of
the term: Historical footnote: DDT was developed at MIT for the PDP-1
computer in 1961. At that time DDT stood for "DEC Debugging Tape". Since
then, the idea of an on-line debugging program has propagated throughout the
computer industry. DDT programs are now available for all DEC computers.
Since media other than tape are now frequently used, the more descriptive
name "Dynamic Debugging Technique" has been adopted, retaining the DDT
abbreviation. Confusion between DDT-10 and another well known pesticide,
dichloro-diphenyl-trichloroethane (C14-H9-Cl5) should be minimal since each
attacks a different, and apparently mutually exclusive, class of bugs. (The
`tape' referred to was, incidentally, not magnetic but paper.) Sadly, this
quotation was removed from later editions of the handbook after the {suit}s
took over and {DEC} became much more `businesslike'. The history above is
known to many old-time hackers. But there's more: Peter Samson, compiler of
the original {TMRC} lexicon, reports that he named `DDT' after a similar tool
on the TX-0 computer, the direct ancestor of the PDP-1 built at MIT's Lincoln
Lab in 1957. The debugger on that ground-breaking machine (the first
transistorized computer) rejoiced in the name FLIT (FLexowriter Interrogation
Tape). :de-rezz: /dee-rez'/ [from `de-resolve' via the movie "Tron"] (also
`derez') 1. vi. To disappear or dissolve; the image that goes with it is of
an object breaking up into raster lines and static and then dissolving.
Occasionally used of a person who seems to have suddenly `fuzzed out'
mentally rather than physically. Usage: extremely silly, also rare. This verb
was actually invented as _fictional_ hacker jargon, and adopted in a spirit
of irony by real hackers years after the fact. 2. vt. The Macintosh resource
decompiler. On a Macintosh, many program structures (including the code
itself) are managed in small segments of the program file known as
`resources'; `Rez' and `DeRez' are a pair of utilities for compiling and
decompiling resource files. Thus, decompiling a resource is `derezzing'.
Usage: very common. :dead: adj. 1. Non-functional; {down}; {crash}ed.
Especially used of hardware. 2. At XEROX PARC, software that is working but
not undergoing continued development and support. 3. Useless; inaccessible.
Antonym: `live'. Compare {dead code}. :dead code: n. Routines that can never
be accessed because all calls to them have been removed, or code that cannot
be reached because it is guarded by a control structure that provably must
always transfer control somewhere else. The presence of dead code may reveal
either logical errors due to alterations in the program or significant
changes in the assumptions and environment of the program (see also {software
rot}); a good compiler should report dead code so a maintainer can think
about what it means. (Sometimes it simply means that an _extremely_ defensive
programmer has inserted {can't happen} tests which really can't happen --
yet.) Syn. {grunge}. see also {dead}, and {The Story of Mel}. :dead link: n.
[very common] A World-Wide-Web URL that no longer points to the information
it was written to reach. Usually this happens because the document has been
moved or deleted. Lots of dead links make a WWW page frustrating and useless
and are the #1 sign of poor page maintainance. Compare {dangling pointer},
{link rot}. :DEADBEEF: /ded-beef/ n. The hexadecimal word-fill pattern for
freshly allocated memory (decimal -21524111) under a number of IBM
environments, including the RS/6000. Some modern debugging tools deliberately
fill freed memory with this value as a way of converting {heisenbug}s into
{Bohr bug}s. As in "Your program is DEADBEEF" (meaning gone, aborted, flushed
from memory); if you start from an odd half-word boundary, of course, you
have BEEFDEAD. see also the anecdote under {fool}. :deadlock: n. 1.
[techspeak] A situation wherein two or more processes are unable to proceed
because each is waiting for one of the others to do something. A common
example is a program communicating to a server, which may find itself waiting
for output from the server before sending anything more to it, while the
server is similarly waiting for more input from the controlling program
before outputting anything. (It is reported that this particular flavor of
deadlock is sometimes called a `starvation deadlock', though the term
`starvation' is more properly used for situations where a program can never
run simply because it never gets high enough priority. Another common flavor
is `constipation', in which each process is trying to send stuff to the other
but all buffers are full because nobody is reading anything.) see {deadly
embrace}.