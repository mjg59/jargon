 AI-complete: /A-I k*m-pleet'/ [MIT, Stanford: by analogy with `NP-complete'
(see {NP-})] adj. Used to describe problems or subproblems in AI, to indicate
that the solution presupposes a solution to the `strong AI problem' (that is,
the synthesis of a human-level intelligence). A problem that is AI-complete
is, in other words, just too hard. Examples of AI-complete problems are `The
Vision Problem' (building a system that can see as well as a human) and `The
Natural Language Problem' (building a system that can understand and speak a
natural language as well as a human). These may appear to be modular, but all
attempts so far (1991) to solve them have foundered on the amount of context
information and `intelligence' they seem to require. see also {gedanken}. AI
koans: /A-I koh'anz/ pl.n. A series of pastiches of Zen teaching riddles
created by Danny Hillis at the MIT AI Lab around various major figures of the
Lab's culture (several are included in appendix A). see also {ha ha only
serious}, {mu}, and {{Humor, Hacker}}. AIDS: /aydz/ n. Short for A* Infected
Disk Syndrome (`A*' is a {glob} pattern that matches, but is not limited to,
Apple), this condition is quite often the result of practicing unsafe {SEX}.
see {virus}, {worm}, {Trojan horse}, {virgin}. airplane rule: n. "Complexity
increases the possibility of failure; a twin-engine airplane has twice as
many engine problems as a single-engine airplane." By analogy, in both
software and electronics, the rule that simplicity increases robustness (see
also {KISS Principle}). It is correspondingly argued that the right way to
build reliable systems is to put all your eggs in one basket, after making
sure that you've built a really *good* basket. aliasing bug: n. A class of
subtle programming errors that can arise in code that does dynamic
allocation, esp. via `malloc(3)' or equivalent. If more than one pointer
addresses (`aliases for') a given hunk of storage, it may happen that the
storage is freed through one alias and then referenced through another, which
may lead to subtle (and possibly intermittent) lossage depending on the state
and the allocation history of the malloc {arena}. Avoidable by use of
allocation strategies that never alias allocated core. Also avoidable by use
of higher-level languages, such as {LISP}, which employ a garbage collector
(see {GC}). Also called a {stale pointer bug}. see also {precedence lossage},
{smash the stack}, {fandango on core}, {memory leak}, {overrun screw},
{spam}. Historical note: Though this term is nowadays associated with C
programming, it was already in use in a very similar sense in the Algol-60
and FORTRAN communities in the 1960s. all-elbows: adj. Of a TSR
(terminate-and-stay-resident) IBM PC program, such as the N pop-up calendar
and calculator utilities that circulate on {BBS} systems: unsociable. Used to
describe a program that rudely steals the resources that it needs without
considering that other TSRs may also be resident. One particularly common
form of rudeness is lock-up due to programs fighting over the keyboard
interrupt. see also {mess-dos}. alpha particles: n. see {bit rot}.