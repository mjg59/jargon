 #======= THIS IS THE JARGON FILE, VERSION 4.4.7, 29 DEC 2003 =======# The
Jargon File (version 4.4.7)
________________________________________________________________ Table of
Contents Welcome to the Jargon File I. Introduction 1. Hacker Slang and
Hacker Culture 2. Of Slang, Jargon, and Techspeak 3. Revision History 4.
Jargon Construction Verb Doubling Soundalike Slang The -P Convention
Overgeneralization Spoken inarticulations Anthropomorphization Comparatives
5. Hacker Writing Style 6. Email Quotes and Inclusion Conventions 7. Hacker
Speech Style 8. International Style 9. Crackers, Phreaks, and Lamers 10.
Pronunciation Guide 11. Other Lexicon Conventions 12. Format for New Entries
II. The Jargon Lexicon Glossary III. Appendices A. Hacker Folklore The
Meaning of `Hack' TV Typewriters: A Tale of Hackish Ingenuity A Story About
`Magic' Some AI Koans Tom Knight and the Lisp Machine Moon instructs a
student Sussman attains enlightenment Drescher and the toaster OS and JEDGAR
The Story of Mel B. A Portrait of J. Random Hacker General Appearance Dress
Reading Habits Other Interests Physical Activity and Sports Education Things
Hackers Detest and Avoid Food Politics Gender and Ethnicity Religion
Ceremonial Chemicals Communication Style Geographical Distribution Sexual
Habits Personality Characteristics Weaknesses of the Hacker Personality
Miscellaneous C. Helping Hacker Culture Grow Bibliography Welcome to the
Jargon File This is the Jargon File, a comprehensive compendium of hacker
slang illuminating many aspects of hackish tradition, folklore, and humor.
This document (the Jargon File) is in the public domain, to be freely used,
shared, and modified. There are (by intention) no legal restraints on what
you can do with it, but there are traditions about its proper use to which
many hackers are quite strongly attached. Please extend the courtesy of
proper citation when you quote the File, ideally with a version number, as it
will change and grow over time. (Examples of appropriate citation form:
"Jargon File 4.4.7" or "The on-line hacker Jargon File, version 4.4.7, 29 Dec
2003".) The Jargon File is a common heritage of the hacker culture. Over the
years a number of individuals have volunteered considerable time to
maintaining the File and been recognized by the net at large as editors of
it. Editorial responsibilities include: to collate contributions and
suggestions from others; to seek out corroborating information; to
cross-reference related entries; to keep the file in a consistent format; and
to announce and distribute updated versions periodically. Current volunteer
editors include: Eric Raymond <esr@thyrsus.com> Although there is no
requirement that you do so, it is considered good form to check with an
editor before quoting the File in a published work or commercial product. We
may have additional information that would be helpful to you and can assist
you in framing your quote to reflect not only the letter of the File but its
spirit as well. All contributions and suggestions about this file sent to a
volunteer editor are gratefully received and will be regarded, unless
otherwise labelled, as freely given donations for possible use as part of
this public-domain file. From time to time a snapshot of this file has been
polished, edited, and formatted for commercial publication with the
cooperation of the volunteer editors and the hacker community at large. If
you wish to have a bound paper copy of this file, you may find it convenient
to purchase one of these. They often contain additional material not found in
on-line versions. The three `authorized' editions so far are described in the
Revision History section; there may be more in the future. The Jargon File's
online rendition uses an unusually large number of special characters. This
test page lists them so you can check what your browser does with each one.
glyph description a greek character alpha k greek character kappa l greek
character lambda L greek character Lambda n greek character nu o greek
character omicron p greek character pi £ pound sterling left angle bracket
right angle bracket æ ae ligature ß German sharp-s sign ?1 similarity sign
(+) circle-plus (×) circle-times × times {} empty set (used for APL null) µ
micro quantifier sign -> right arrow <=> horizontal double arrow (TM)
trademark symbol ® registered-trademark symbol - minus ± plus-or-minus Ø
slashed-O @ schwa ´ acute accent · medial dot We normally test with the
latest build of Mozilla. If some of the special characters above look wrong,
your browser has bugs in its standards-conformance and you should replace it.
Introduction Table of Contents 1. Hacker Slang and Hacker Culture 2. Of
Slang, Jargon, and Techspeak 3. Revision History 4. Jargon Construction Verb
Doubling Soundalike Slang The -P Convention Overgeneralization Spoken
inarticulations Anthropomorphization Comparatives 5. Hacker Writing Style 6.
Email Quotes and Inclusion Conventions 7. Hacker Speech Style 8.
International Style 9. Crackers, Phreaks, and Lamers 10. Pronunciation Guide
11. Other Lexicon Conventions 12. Format for New Entries Chapter 1. Hacker
Slang and Hacker Culture This document is a collection of slang terms used by
various subcultures of computer hackers. Though some technical material is
included for background and flavor, it is not a technical dictionary; what we
describe here is the language hackers use among themselves for fun, social
communication, and technical debate. The `hacker culture' is actually a
loosely networked collection of subcultures that is nevertheless conscious of
some important shared experiences, shared roots, and shared values. It has
its own myths, heroes, villains, folk epics, in-jokes, taboos, and dreams.
Because hackers as a group are particularly creative people who define
themselves partly by rejection of `normal' values and working habits, it has
unusually rich and conscious traditions for an intentional culture less than
50 years old. As usual with slang, the special vocabulary of hackers helps
hold places in the community and expresses shared values and experiences.
Also as usual, not knowing the slang (or using it inappropriately) defines
one as an outsider, a mundane, or (worst of all in hackish vocabulary)
possibly even a suit. All human cultures use slang in this threefold way --
as a tool of communication, and of inclusion, and of exclusion. Among
hackers, though, slang has a subtler aspect, paralleled perhaps in the slang
of jazz musicians and some kinds of fine artists but hard to detect in most
technical or scientific cultures; parts of it are code for shared states of
consciousness. There is a whole range of altered states and problem-solving
mental stances basic to high-level hacking which don't fit into conventional
linguistic reality any better than a Coltrane solo or one of Maurits Escher's
surreal trompe l'oeil compositions (Escher is a favorite of hackers), and
hacker slang encodes these subtleties in many unobvious ways. As a simple
example, take the distinction between a kluge and an elegant solution, and
the differing connotations attached to each. The distinction is not only of
engineering significance; it reaches right back into the nature of the
generative processes in program design and asserts something important about
two different kinds of relationship between the hacker and the hack. Hacker
slang is unusually rich in implications of this kind, of overtones and
undertones that illuminate the hackish psyche. Hackers, as a rule, love
wordplay and are very conscious and inventive in their use of language. These
traits seem to be common in young children, but the conformity-enforcing
machine we are pleased to call an educational system bludgeons them out of
most of us before adolescence. Thus, linguistic invention in most subcultures
of the modern West is a halting and largely unconscious process. Hackers, by
contrast, regard slang formation and use as a game to be played for conscious
pleasure. Their inventions thus display an almost unique combination of the
neotenous enjoyment of language-play with the discrimination of educated and
powerful intelligence. Further, the electronic media which knit them together
are fluid, `hot' connections, well adapted to both the dissemination of new
slang and the ruthless culling of weak and superannuated specimens. The
results of this process give us perhaps a uniquely intense and accelerated
view of linguistic evolution in action. Hacker slang also challenges some
common linguistic and anthropological assumptions. For example, in the early
1990s it became fashionable to speak of `low-context' versus `high-context'
communication, and to classify cultures by the preferred context level of
their languages and art forms. It is usually claimed that low-context
communication (characterized by precision, clarity, and completeness of
self-contained utterances) is typical in cultures which value logic,
objectivity, individualism, and competition; by contrast, high-context
communication (elliptical, emotive, nuance-filled, multi-modal, heavily
coded) is associated with cultures which value subjectivity, consensus,
cooperation, and tradition. What then are we to make of hackerdom, which is
themed around extremely low-context interaction with computers and exhibits
primarily "low-context" values, but cultivates an almost absurdly
high-context slang style? The intensity and consciousness of hackish
invention make a compilation of hacker slang a particularly effective window
into the surrounding culture -- and, in fact, this one is the latest version
of an evolving compilation called the `Jargon File', maintained by hackers
themselves since the early 1970s. This one (like its ancestors) is primarily
a lexicon, but also includes topic entries which collect background or
sidelight information on hacker culture that would be awkward to try to
subsume under individual slang definitions. Though the format is that of a
reference volume, it is intended that the material be enjoyable to browse.
Even a complete outsider should find at least a chuckle on nearly every page,
and much that is amusingly thought-provoking. But it is also true that
hackers use humorous wordplay to make strong, sometimes combative statements
about what they feel. Some of these entries reflect the views of opposing
sides in disputes that have been genuinely passionate; this is deliberate. We
have not tried to moderate or pretty up these disputes; rather we have
attempted to ensure that everyone's sacred cows get gored, impartially.
Compromise is not particularly a hackish virtue, but the honest presentation
of divergent viewpoints is. The reader with minimal computer background who
finds some references incomprehensibly technical can safely ignore them. We
have not felt it either necessary or desirable to eliminate all such; they,
too, contribute flavor, and one of this document's major intended audiences
-- fledgling hackers already partway inside the culture -- will benefit from
them. A selection of longer items of hacker folklore and humor is included in
Appendix A. The `outside' reader's attention is particularly directed to the
Portrait of J. Random Hacker in Appendix B. The Bibliography, lists some
non-technical works which have either influenced or described the hacker
culture. Because hackerdom is an intentional culture (one each individual
must choose by action to join), one should not be surprised that the line
between description and influence can become more than a little blurred.
Earlier versions of the Jargon File have played a central role in spreading
hacker language and the culture that goes with it to successively larger
populations, and we hope and expect that this one will do likewise. Chapter
2. Of Slang, Jargon, and Techspeak Linguists usually refer to informal
language as `slang' and reserve the term `jargon' for the technical
vocabularies of various occupations. However, the ancestor of this collection
was called the `Jargon File', and hacker slang is traditionally `the jargon'.
When talking about the jargon there is therefore no convenient way to
distinguish it from what a linguist would call hackers' jargon -- the formal
vocabulary they learn from textbooks, technical papers, and manuals. To make
a confused situation worse, the line between hacker slang and the vocabulary
of technical programming and computer science is fuzzy, and shifts over time.
Further, this vocabulary is shared with a wider technical culture of
programmers, many of whom are not hackers and do not speak or recognize
hackish slang. Accordingly, this lexicon will try to be as precise as the
facts of usage permit about the distinctions among three categories: slang
informal language from mainstream English or non-technical subcultures
(bikers, rock fans, surfers, etc). jargon without qualifier, denotes informal
`slangy' language peculiar to or predominantly found among hackers -- the
subject of this lexicon. techspeak the formal technical vocabulary of
programming, computer science, electronics, and other fields connected to
hacking. This terminology will be consistently used throughout the remainder
of this lexicon. The jargon/techspeak distinction is the delicate one. A lot
of techspeak originated as jargon, and there is a steady continuing uptake of
jargon into techspeak. On the other hand, a lot of jargon arises from
overgeneralization of techspeak terms (there is more about this in the Jargon
Construction section below). In general, we have considered techspeak any
term that communicate primarily by a denotation well established in
textbooks, technical dictionaries, or standards documents. A few obviously
techspeak terms (names of operating systems, languages, or documents) are
listed when they are tied to hacker folklore that isn't covered in formal
sources, or sometimes to convey critical historical background necessary to
understand other entries to which they are cross-referenced. Some other
techspeak senses of jargon words are listed in order to make the jargon
senses clear; where the text does not specify that a straight technical sense
is under discussion, these are marked with `[techspeak]' as an etymology.
Some entries have a primary sense marked this way, with subsequent jargon
meanings explained in terms of it. We have also tried to indicate (where
known) the apparent origins of terms. The results are probably the least
reliable information in the lexicon, for several reasons. For one thing, it
is well known that many hackish usages have been independently reinvented
multiple times, even among the more obscure and intricate neologisms. It
often seems that the generative processes underlying hackish jargon formation
have an internal logic so powerful as to create substantial parallelism
across separate cultures and even in different languages! For another, the
networks tend to propagate innovations so quickly that `first use' is often
impossible to pin down. And, finally, compendia like this one alter what they
observe by implicitly stamping cultural approval on terms and widening their
use. Despite these problems, the organized collection of jargon-related oral
history for the new compilations has enabled us to put to rest quite a number
of folk etymologies, place credit where credit is due, and illuminate the
early history of many important hackerisms such as kluge, cruft, and foo. We
believe specialist lexicographers will find many of the historical notes more
than casually instructive. Chapter 3. Revision History The original Jargon
File was a collection of hacker jargon from technical cultures including the
MIT AI Lab, the Stanford AI lab (SAIL), and others of the old ARPANET
AI/LISP/PDP-10 communities including Bolt, Beranek and Newman (BBN),
Carnegie-Mellon University (CMU), and Worcester Polytechnic Institute (WPI).
The Jargon File (hereafter referred to as `jargon-1' or `the File') was begun
by Raphael Finkel at Stanford in 1975. From this time until the plug was
finally pulled on the SAIL computer in 1991, the File was named
AIWORD.RF[UP,DOC] there. Some terms in it date back considerably earlier
(frob and some senses of moby, for instance, go back to the Tech Model
Railroad Club at MIT and are believed to date at least back to the early
1960s). The revisions of jargon-1 were all unnumbered and may be collectively
considered `Version 1'. In 1976, Mark Crispin, having seen an announcement
about the File on the SAIL computer, FTPed a copy of the File to MIT. He
noticed that it was hardly restricted to `AI words' and so stored the file on
his directory as AI:MRC;SAIL JARGON. The file was quickly renamed JARGON >
(the `>' caused versioning under ITS) as a flurry of enhancements were made
by Mark Crispin and Guy L. Steele Jr. Unfortunately, amidst all this
activity, nobody thought of correcting the term `jargon' to `slang' until the
compendium had already become widely known as the Jargon File. Raphael Finkel
dropped out of active participation shortly thereafter and Don Woods became
the SAIL contact for the File (which was subsequently kept in duplicate at
SAIL and MIT, with periodic resynchronizations). The File expanded by fits
and starts until about 1983; Richard Stallman was prominent among the
contributors, adding many MIT and ITS-related coinages. In Spring 1981, a
hacker named Charles Spurgeon got a large chunk of the File published in
Stewart Brand's CoEvolution Quarterly (issue 29, pages 26--35) with
illustrations by Phil Wadler and Guy Steele (including a couple of the
Crunchly cartoons). This appears to have been the File's first paper
publication. A late version of jargon-1, expanded with commentary for the
mass market, was edited by Guy Steele into a book published in 1983 as The
Hacker's Dictionary (Harper & Row CN 1082, ISBN 0-06-091082-8). The other
jargon-1 editors (Raphael Finkel, Don Woods, and Mark Crispin) contributed to
this revision, as did Richard M. Stallman and Geoff Goodfellow. This book
(now out of print) is hereafter referred to as `Steele-1983' and those six as
the Steele-1983 coauthors. Shortly after the publication of Steele-1983, the
File effectively stopped growing and changing. Originally, this was due to a
desire to freeze the file temporarily to facilitate the production of
Steele-1983, but external conditions caused the `temporary' freeze to become
permanent. The AI Lab culture had been hit hard in the late 1970s by funding
cuts and the resulting administrative decision to use vendor-supported
hardware and software instead of homebrew whenever possible. At MIT, most AI
work had turned to dedicated LISP Machines. At the same time, the
commercialization of AI technology lured some of the AI Lab's best and
brightest away to startups along the Route 128 strip in Massachusetts and out
West in Silicon Valley. The startups built LISP machines for MIT; the central
MIT-AI computer became a TWENEX system rather than a host for the AI hackers'
beloved ITS. The Stanford AI Lab had effectively ceased to exist by 1980,
although the SAIL computer continued as a Computer Science Department
resource until 1991. Stanford became a major TWENEX site, at one point
operating more than a dozen TOPS-20 systems; but by the mid-1980s most of the
interesting software work was being done on the emerging BSD Unix standard.
In April 1983, the PDP-10-centered cultures that had nourished the File were
dealt a death-blow by the cancellation of the Jupiter project at Digital
Equipment Corporation. The File's compilers, already dispersed, moved on to
other things. Steele-1983 was partly a monument to what its authors thought
was a dying tradition; no one involved realized at the time just how wide its
influence was to be. By the mid-1980s the File's content was dated, but the
legend that had grown up around it never quite died out. The book, and
softcopies obtained off the ARPANET, circulated even in cultures far removed
from MIT and Stanford; the content exerted a strong and continuing influence
on hacker language and humor. Even as the advent of the microcomputer and
other trends fueled a tremendous expansion of hackerdom, the File (and
related materials such as the Some AI Koans in Appendix A) came to be seen as
a sort of sacred epic, a hacker-culture Matter of Britain chronicling the
heroic exploits of the Knights of the Lab. The pace of change in hackerdom at
large accelerated tremendously -- but the Jargon File, having passed from
living document to icon, remained essentially untouched for seven years. This
revision contains nearly the entire text of a late version of jargon-1 (a few
obsolete PDP-10-related entries were dropped after careful consultation with
the editors of Steele-1983). It merges in about 80% of the Steele-1983 text,
omitting some framing material and a very few entries introduced in
Steele-1983 that are now also obsolete. This new version casts a wider net
than the old Jargon File; its aim is to cover not just AI or PDP-10 hacker
culture but all the technical computing cultures wherein the true
hacker-nature is manifested. More than half of the entries now derive from
Usenet and represent jargon now current in the C and Unix communities, but
special efforts have been made to collect jargon from other cultures
including IBM PC programmers, Amiga fans, Mac enthusiasts, and even the IBM
mainframe world. Eric S. Raymond <esr@thyrsus.com> maintains the new File
with assistance from Guy L. Steele Jr. <gls@think.com>; these are the persons
primarily reflected in the File's editorial `we', though we take pleasure in
acknowledging the special contribution of the other coauthors of Steele-1983.
Please email all additions, corrections, and correspondence relating to the
Jargon File to Eric. (Warning: other email addresses and URLs appear in this
file but are not guaranteed to be correct after date of publication. Don't
email us if an attempt to reach someone bounces -- we have no magic way of
checking addresses or looking up people. If a web reference goes stale, try a
Google or Alta Vista search for relevant phrases. Please try to review a
recent copy of the on-line document before submitting entries; it is
available on the Web. It will often contain new material not recorded in the
latest paper snapshot that could save you some typing. It also includes some
submission guidelines not reproduced here. The 2.9.6 version became the main
text of The New Hacker's Dictionary, by Eric Raymond (ed.), MIT Press 1991,
ISBN 0-262-68069-6. The 3.0.0 version was published in August 1993 as the
second edition of The New Hacker's Dictionary, again from MIT Press (ISBN
0-262-18154-1). The 4.0.0 version was published in September 1996 as the
third edition of The New Hacker's Dictionary from MIT Press (ISBN
0-262-68092-0). The maintainers are committed to updating the on-line version
of the Jargon File through and beyond paper publication, and will continue to
make it available to archives and public-access sites as a trust of the
hacker community. Here is a chronology of major revisions: Version Date Lines
Words Characters Entries Comments 2.1.1 Jun 12 1990 5485 42842 278958 790 The
Jargon File comes alive again after a seven-year hiatus. Reorganization and
massive additions were by Eric S. Raymond, approved by Guy Steele. Many items
of UNIX, C, USENET, and microcomputer-based jargon were added at that time.
2.1.5 Nov 28 1990 6028 46946 307510 866 Changes and additions by ESR in
response to numerous USENET submissions and comment from the First Edition
co-authors. The Bibliography (Appendix C) was also appended. 2.2.1 Dec 15
1990 9394 75954 490501 1046 Most of the contents of the 1983 paper edition
edited by Guy Steele was merged in. Many more USENET submissions added,
including the International Style and the material on Commonwealth Hackish.
2.3.1 Jan 03 1991 10728 85070 558261 1138 The great format change -- case is
no longer smashed in lexicon keys and cross-references. A very few entries
from jargon-1 which were basically straight techspeak were deleted; this
enabled the rest of Appendix B (created in 2.1.1) to be merged back into main
text and the appendix replaced with the Portrait of J. Random Hacker. More
USENET submissions were added. 2.4.1 Jan 14 1991 12362 97819 642899 1239 The
Story of Mel and many more USENET submissions merged in. More material on
hackish writing habits added. Numerous typo fixes. 2.6.1 Feb 12 1991 15011
118277 774942 1484 Second great format change; no more <> around headwords or
references. Merged in results of serious copy-editing passes by Guy Steele,
Mark Brader. Still more entries added. 2.7.1 Mar 01 1991 16087 126885 831872
1533 New section on slang/jargon/techspeak added. Results of Guy's second
edit pass merged in. 2.8.1 Mar 22 1991 17154 135647 888333 1602 Material from
the TMRC Dictionary and MRC's editing pass merged in. 2.9.6 Aug 16 1991 18952
148629 975551 1702 Corresponds to reproduction copy for book. 2.9.8 Jan 01
1992 19509 153108 1006023 1760 First public release since the book, including
over fifty new entries and numerous corrections/additions to old ones.
Packaged with version 1.1 of vh(1) hypertext reader. 2.9.9 Apr 01 1992 20298
159651 1048909 1821 Folded in XEROX PARC lexicon. 2.9.10 Jul 01 1992 21349
168330 1106991 1891 lots of new historical material. 2.9.11 Jan 01 1993 21725
171169 1125880 1922 Lots of new historical material. 2.9.12 May 10 1993 22238
175114 1152467 1946 A few new entries & changes, marginal MUD/IRC slang and
some borderline techspeak removed, all in preparation for 2nd Edition of
TNHD. 3.0.0 Jul 27 1993 22548 177520 1169372 1961 Manuscript freeze for 2nd
edition of TNHD. 3.1.0 Oct 15 1994 23197 181001 1193818 1990 Interim release
to test WWW conversion. 3.2.0 Mar 15 1995 23822 185961 1226358 2031 Spring
1995 update. 3.3.0 Jan 20 1996 24055 187957 1239604 2045 Winter 1996 update.
3.3.1 Jan 25 1996 24147 188728 1244554 2050 Copy-corrected improvement on
3.3.0 shipped to MIT Press as a step towards TNHD III. 4.0.0 Jul 25 1996
24801 193697 1281402 2067 The actual TNHD III version after copy-edit 4.1.0 8
Apr 1999 25777 206825 1359992 2217 The Jargon File rides again after three
years. 4.2.0 31 Jan 2000 26598 214639 1412243 2267 Fix processing of URLs.
4.3.0 30 Apr 2001 27805 224978 1480215 2319 Special edition in honor of the
first implementation of RFC 1149. Also cleaned up a number of obsolete
entries. 4.4.0 10 May 2003 32004 230012 1707139 2290 XML-Docbook format
conversion. Serious pruning of old slang, nearly 100 entries failed the
Google test and were removed. 4.4.1 13 May 2003 37157 234687 1618716 2290
XML-Docbook format fixes. 4.4.2 22 May 2003 32629 227852 1555125 2290 Fix
filename collisions and other small problems. 4.4.3 15 Jul 2003 37363 235135
1629667 2293 Fix some stylesheet problems leading to missing links. 4.4.4 14
Aug 2003 37392 235271 1630579 2295 Corrected build machinery; we can make
RPMS now. 4.4.5 4 Oct 2003 37482 235858 1634767 2299 Minor updates. Four new
entries and a better original-bug picture. 4.4.6 25 Oct 2003 37560 236406
1638454 2302 Added glider illustration. Amended FUD entry pursuent to SCO's
attempt to abuse it. 4.4.7 29 Dec 2003 37666 237206 1643609 2307 Winter 2003
update. Version numbering: Version numbers should be read as
major.minor.revision. Major version 1 is reserved for the `old' (ITS) Jargon
File, jargon-1. Major version 2 encompasses revisions by ESR (Eric S.
Raymond) with assistance from GLS (Guy L. Steele, Jr.) leading up to and
including the second paper edition. From now on, major version number N.00
will probably correspond to the Nth paper edition. Usually later versions
will either completely supersede or incorporate earlier versions, so there is
generally no point in keeping old versions around. Our thanks to the
coauthors of Steele-1983 for oversight and assistance, and to the hundreds of
Usenetters (too many to name here) who contributed entries and encouragement.
More thanks go to several of the old-timers on the Usenet group
alt.folklore.computers, who contributed much useful commentary and many
corrections and valuable historical perspective: Joseph M. Newcomer
<jn11+@andrew.cmu.edu>, Bernie Cosell <cosell@bbn.com>, Earl Boebert
<boebert@SCTC.com>, and Joe Morris <jcmorris@mwunix.mitre.org>. We were
fortunate enough to have the aid of some accomplished linguists. David Stampe
<stampe@hawaii.edu> and Charles Hoequist <hoequist@bnr.ca> contributed
valuable criticism; Joe Keane <jgk@osc.osc.com> helped us improve the
pronunciation guides. A few bits of this text quote previous works. We are
indebted to Brian A. LaMacchia <bal@zurich.ai.mit.edu> for obtaining
permission for us to use material from the TMRC Dictionary; also, Don Libes
<libes@cme.nist.gov> contributed some appropriate material from his excellent
book Life With UNIX. We thank Per Lindberg <per@front.se>, author of the
remarkable Swedish-language 'zine Hackerbladet, for bringing FOO! comics to
our attention and smuggling one of the IBM hacker underground's own baby
jargon files out to us. Thanks also to Maarten Litmaath for generously
allowing the inclusion of the ASCII pronunciation guide he formerly
maintained. And our gratitude to Marc Weiser of XEROX PARC
<Marc_Weiser.PARC@xerox.com> for securing us permission to quote from PARC's
own jargon lexicon and shipping us a copy. It is a particular pleasure to
acknowledge the major contributions of Mark Brader and Steve Summit
<scs@eskimo.com> to the File and Dictionary; they have read and reread many
drafts, checked facts, caught typos, submitted an amazing number of
thoughtful comments, and done yeoman service in catching typos and minor
usage bobbles. Their rare combination of enthusiasm, persistence,
wide-ranging technical knowledge, and precisionism in matters of language has
been of invaluable help. Indeed, the sustained volume and quality of Mr.
Brader's input over a decade and several different editions has only allowed
him to escape co-editor credit by the slimmest of margins. Finally, George V.
Reilly <georgere@microsoft.com> helped with TeX arcana and painstakingly
proofread some 2.7 and 2.8 versions, and Eric Tiedemann <est@thyrsus.com>
contributed sage advice throughout on rhetoric, amphigory, and
philosophunculism. Chapter 4. Jargon Construction Table of Contents Verb
Doubling Soundalike Slang The -P Convention Overgeneralization Spoken
inarticulations Anthropomorphization Comparatives There are some standard
methods of jargonification that became established quite early (i.e., before
1970), spreading from such sources as the Tech Model Railroad Club, the PDP-1
SPACEWAR hackers, and John McCarthy's original crew of LISPers. These include
verb doubling, soundalike slang, the `-P' convention, overgeneralization,
spoken inarticulations, and anthropomorphization. Each is discussed below. We
also cover the standard comparatives for design quality. Of these six, verb
doubling, overgeneralization, anthropomorphization, and (especially) spoken
inarticulations have become quite general; but soundalike slang is still
largely confined to MIT and other large universities, and the `-P' convention
is found only where LISPers flourish. Verb Doubling A standard construction
in English is to double a verb and use it as an exclamation, such as "Bang,
bang!" or "Quack, quack!". Most of these are names for noises. Hackers also
double verbs as a concise, sometimes sarcastic comment on what the implied
subject does. Also, a doubled verb is often used to terminate a conversation,
in the process remarking on the current state of affairs or what the speaker
intends to do next. Typical examples involve win, lose, hack, flame, barf,
chomp: "The disk heads just crashed." "Lose, lose." "Mostly he talked about
his latest crock. Flame, flame." "Boy, what a bagbiter! Chomp, chomp! Some
verb-doubled constructions have special meanings not immediately obvious from
the verb. These have their own listings in the lexicon. The Usenet culture
has one tripling convention unrelated to this; the names of `joke' topic
groups often have a tripled last element. The first and paradigmatic example
was alt.swedish.chef.bork.bork.bork (a Muppet Show reference); other infamous
examples have included: * alt.french.captain.borg.borg.borg *
alt.wesley.crusher.die.die.die * comp.unix.internals.system.calls.brk.brk.brk
* sci.physics.edward.teller.boom.boom.boom *
alt.sadistic.dentists.drill.drill.drill These two traditions fuse in the
newsgroup alt.adjective.noun.verb.verb.verb, devoted to humor based on
deliberately confounding parts of speech. Several observers have noted that
the contents of this group is excellently representative of the peculiarities
of hacker humor. Soundalike Slang Hackers will often make rhymes or puns in
order to convert an ordinary word or phrase into something more interesting.
It is considered particularly flavorful if the phrase is bent so as to
include some other jargon word; thus the computer hobbyist magazine Dr.
Dobb's Journal is almost always referred to among hackers as `Dr. Frob's
Journal' or simply `Dr. Frob's'. Terms of this kind that have been in fairly
wide use include names for newspapers: * Boston Herald -> Horrid (or Harried)
* Boston Globe -> Boston Glob * Houston (or San Francisco) Chronicle -> the
Crocknicle (or the Comical) * New York Times -> New York Slime * Wall Street
Journal -> Wall Street Urinal However, terms like these are often made up on
the spur of the moment. Standard examples include: * Data General -> Dirty
Genitals * IBM 360 -> IBM Three-Sickly * Government Property -- Do Not
Duplicate (on keys) -> Government Duplicity -- Do Not Propagate * for
historical reasons -> for hysterical raisins * Margaret Jacks Hall (the CS
building at Stanford) -> Marginal Hacks Hall * Microsoft -> Microsloth *
Internet Explorer -> Internet Exploiter * FrontPage -> AffrontPage * VB.NET
-> VB Nyet * Lotus Notes -> Lotus Bloats * Microsoft Outlook -> Microsoft
Outhouse * Linux -> Linsux * FreeBSD -> FreeLSD * C# -> C Flat This is not
really similar to the Cockney rhyming slang it has been compared to in the
past, because Cockney substitutions are opaque whereas hacker punning jargon
is intentionally transparent. The -P Convention Turning a word into a
question by appending the syllable `P'; from the LISP convention of appending
the letter `P' to denote a predicate (a boolean-valued function). The
question should expect a yes/no answer, though it needn't. (see T and NIL.)
At dinnertime: Q: "Foodp?" A: "Yeah, I'm pretty hungry." or "T!" At any time:
Q: "State-of-the-world-P?" A: (Straight) "I'm about to go home." A:
(Humorous) "Yes, the world has a state." On the phone to Florida: Q: "State-p
Florida?" A: "Been reading JARGON.TXT again, eh?" [Once, when we were at a
Chinese restaurant, Bill Gosper wanted to know whether someone would like to
share with him a two-person-sized bowl of soup. His inquiry was: "Split-p
soup?" -- GLS] Overgeneralization A very conspicuous feature of jargon is the
frequency with which techspeak items such as names of program tools, command
language primitives, and even assembler opcodes are applied to contexts
outside of computing wherever hackers find amusing analogies to them. Thus
(to cite one of the best-known examples) Unix hackers often grep for things
rather than searching for them. Many of the lexicon entries are
generalizations of exactly this kind. Hackers enjoy overgeneralization on the
grammatical level as well. Many hackers love to take various words and add
the wrong endings to them to make nouns and verbs, often by extending a
standard rule to nonuniform cases (or vice versa). For example, because
porous -> porosity and generous -> generosity, hackers happily generalize: *
mysterious -> mysteriosity * ferrous -> ferrosity * obvious -> obviosity *
dubious -> dubiosity Another class of common construction uses the suffix
`-itude' to abstract a quality from just about any adjective or noun. This
usage arises especially in cases where mainstream English would perform the
same abstraction through `-iness' or `-ingness'. Thus: * win -> winnitude (a
common exclamation) * loss -> lossitude * cruft -> cruftitude * lame ->
lameitude Some hackers cheerfully reverse this transformation; they argue,
for example, that the horizontal degree lines on a globe ought to be called
`lats' -- after all, they're measuring latitude! Also, note that all nouns
can be verbed. E.g.: "All nouns can be verbed", "I'll mouse it up", "Hang on
while I clipboard it over", "I'm grepping the files". English as a whole is
already heading in this direction (towards pure-positional grammar like
Chinese); hackers are simply a bit ahead of the curve. The suffix "-full" can
also be applied in generalized and fanciful ways, as in "As soon as you have
more than one cachefull of data, the system starts thrashing," or "As soon as
I have more than one headfull of ideas, I start writing it all down." A
common use is "screenfull", meaning the amount of text that will fit on one
screen, usually in text mode where you have no choice as to character size.
Another common form is "bufferfull". However, hackers avoid the unimaginative
verb-making techniques characteristic of marketroids, bean-counters, and the
Pentagon; a hacker would never, for example, `productize', `prioritize', or
`securitize' things. Hackers have a strong aversion to bureaucratic bafflegab
and regard those who use it with contempt. Similarly, all verbs can be
nouned. This is only a slight overgeneralization in modern English; in
hackish, however, it is good form to mark them in some standard nonstandard
way. Thus: * win -> winnitude, winnage * disgust -> disgustitude * hack ->
hackification Further, note the prevalence of certain kinds of nonstandard
plural forms. Some of these go back quite a ways; the TMRC Dictionary
includes an entry which implies that the plural of `mouse' is meeces, and
notes that the defined plural of `caboose' is `cabeese'. This latter has
apparently been standard (or at least a standard joke) among railfans
(railroad enthusiasts) for many years On a similarly Anglo-Saxon note, almost
anything ending in `x' may form plurals in `-xen' (see VAXen and boxen in the
main text). Even words ending in phonetic /k/ alone are sometimes treated
this way; e.g., `soxen' for a bunch of socks. Other funny plurals are the
Hebrew-style `frobbotzim' for the plural of `frobbozz' (see frobnitz) and
`Unices' and `Twenices' (rather than `Unixes' and `Twenexes'; see Unix,
TWENEX in main text). But note that `Twenexen' was never used, and `Unixen'
was seldom sighted in the wild until the year 2000, thirty years after it
might logically have come into use; it has been suggested that this is
because `-ix' and `-ex' are Latin singular endings that attract a Latinate
plural. Among Perl hackers it is reported that `comma' and `semicolon'
pluralize as `commata' and `semicola' respectively. Finally, it has been
suggested to general approval that the plural of `mongoose' ought to be
`polygoose'. The pattern here, as with other hackish grammatical quirks, is
generalization of an inflectional rule that in English is either an import or
a fossil (such as the Hebrew plural ending `-im', or the Anglo-Saxon plural
suffix `-en') to cases where it isn't normally considered to apply. This is
not `poor grammar', as hackers are generally quite well aware of what they
are doing when they distort the language. It is grammatical creativity, a
form of playfulness. It is done not to impress but to amuse, and never at the
expense of clarity. Spoken inarticulations Words such as `mumble', `sigh',
and `groan' are spoken in places where their referent might more naturally be
used. It has been suggested that this usage derives from the impossibility of
representing such noises on a comm link or in electronic mail, MUDs, and IRC
channels (interestingly, the same sorts of constructions have been showing up
with increasing frequency in comic strips). Another expression sometimes
heard is "Complain!", meaning "I have a complaint!" Anthropomorphization
Semantically, one rich source of jargon constructions is the hackish tendency
to anthropomorphize hardware and software. English purists and academic
computer scientists frequently look down on others for anthropomorphizing
hardware and software, considering this sort of behavior to be characteristic
of naive misunderstanding. But most hackers anthropomorphize freely,
frequently describing program behavior in terms of wants and desires. Thus it
is common to hear hardware or software talked about as though it has
homunculi talking to each other inside it, with intentions and desires. Thus,
one hears "The protocol handler got confused", or that programs "are trying"
to do things, or one may say of a routine that "its goal in life is to X".
Or: "You can't run those two cards on the same bus; they fight over interrupt
9." One even hears explanations like "... and its poor little brain couldn't
understand X, and it died." Sometimes modelling things this way actually
seems to make them easier to understand, perhaps because it's instinctively
natural to think of anything with a really complex behavioral repertoire as
`like a person' rather than `like a thing'. At first glance, to anyone who
understands how these programs actually work, this seems like an absurdity.
As hackers are among the people who know best how these phenomena work, it
seems odd that they would use language that seems to ascribe consciousness to
them. The mind-set behind this tendency thus demands examination. The key to
understanding this kind of usage is that it isn't done in a naive way;
hackers don't personalize their stuff in the sense of feeling empathy with
it, nor do they mystically believe that the things they work on every day are
`alive'. To the contrary: hackers who anthropomorphize are expressing not a
vitalistic view of program behavior but a mechanistic view of human behavior.
Almost all hackers subscribe to the mechanistic, materialistic ontology of
science (this is in practice true even of most of the minority with contrary
religious theories). In this view, people are biological machines --
consciousness is an interesting and valuable epiphenomenon, but mind is
implemented in machinery which is not fundamentally different in
information-processing capacity from computers. Hackers tend to take this a
step further and argue that the difference between a substrate of CHON atoms
and water and a substrate of silicon and metal is a relatively unimportant
one; what matters, what makes a thing `alive', is information and richness of
pattern. This is animism from the flip side; it implies that humans and
computers and dolphins and rocks are all machines exhibiting a continuum of
modes of `consciousness' according to their information-processing capacity.
Because hackers accept that a human machine can have intentions, it is
therefore easy for them to ascribe consciousness and intention to other
complex patterned systems such as computers. If consciousness is mechanical,
it is neither more or less absurd to say that "The program wants to go into
an infinite loop" than it is to say that "I want to go eat some chocolate" --
and even defensible to say that "The stone, once dropped, wants to move
towards the center of the earth". This viewpoint has respectable company in
academic philosophy. Daniel Dennett organizes explanations of behavior using
three stances: the "physical stance" (thing-to-be-explained as a physical
object), the "design stance" (thing-to-be-explained as an artifact), and the
"intentional stance" (thing-to-be-explained as an agent with desires and
intentions). Which stances are appropriate is a matter not of abstract truth
but of utility. Hackers typically view simple programs from the design
stance, but more complex ones are often modelled using the intentional
stance. It has also been argued that the anthropomorphization of software and
hardware reflects a blurring of the boundary between the programmer and his
artifacts -- the human qualities belong to the programmer and the code merely
expresses these qualities as his/her proxy. On this view, a hacker saying a
piece of code `got confused' is really saying that he (or she) was confused
about exactly what he wanted the computer to do, the code naturally
incorporated this confusion, and the code expressed the programmer's
confusion when executed by crashing or otherwise misbehaving. Note that by
displacing from "I got confused" to "It got confused", the programmer is not
avoiding responsibility, but rather getting some analytical distance in order
to be able to consider the bug dispassionately. It has also been suggested
that anthropomorphizing complex systems is actually an expression of
humility, a way of acknowleging that simple rules we do understand (or that
we invented) can lead to emergent behavioral complexities that we don't
completely understand. All three explanations accurately model hacker
psychology, and should be considered complementary rather than competing.
Comparatives Finally, note that many words in hacker jargon have to be
understood as members of sets of comparatives. This is especially true of the
adjectives and nouns used to describe the beauty and functional quality of
code. Here is an approximately correct spectrum: monstrosity brain-damage
screw bug lose misfeature crock kluge hack win feature elegance perfection
The last is spoken of as a mythical absolute, approximated but never actually
attained. Another similar scale is used for describing the reliability of
software: broken flaky dodgy fragile brittle solid robust bulletproof
armor-plated Note, however, that `dodgy' is primarily Commonwealth Hackish
(it is rare in the U.S., where `squirrelly' may be more common) and may
change places with `flaky' for some speakers. Coinages for describing lossage
seem to call forth the very finest in hackish linguistic inventiveness; it
has been truly said that hackers have even more words for equipment failures
than Yiddish has for obnoxious people. Chapter 5. Hacker Writing Style We've
already seen that hackers often coin jargon by overgeneralizing grammatical
rules. This is one aspect of a more general fondness for form-versus-content
language jokes that shows up particularly in hackish writing. One
correspondent reports that he consistently misspells `wrong' as `worng'.
Others have been known to criticize glitches in Jargon File drafts by
observing (in the mode of Douglas Hofstadter) "This sentence no verb", or
"Too repetetetive", or "Bad speling", or "Incorrectspa cing." Similarly,
intentional spoonerisms are often made of phrases relating to confusion or
things that are confusing; `dain bramage' for `brain damage' is perhaps the
most common (similarly, a hacker would be likely to write "Excuse me, I'm
cixelsyd today", rather than "I'm dyslexic today"). This sort of thing is
quite common and is enjoyed by all concerned. Hackers tend to use quotes as
balanced delimiters like parentheses, much to the dismay of American editors.
Thus, if "Jim is going" is a phrase, and so are "Bill runs" and "Spock
groks", then hackers generally prefer to write: "Jim is going", "Bill runs",
and "Spock groks". This is incorrect according to standard American usage
(which would put the continuation commas and the final period inside the
string quotes); however, it is counter-intuitive to hackers to mutilate
literal strings with characters that don't belong in them. Given the sorts of
examples that can come up in discussions of programming, American-style
quoting can even be grossly misleading. When communicating command lines or
small pieces of code, extra characters can be a real pain in the neck.
Consider, for example, a sentence in a vi tutorial that looks like this: Then
delete a line from the file by typing "dd". Standard usage would make this
Then delete a line from the file by typing "dd." but that would be very bad
-- because the reader would be prone to type the string d-d-dot, and it
happens that in vi(1), dot repeats the last command accepted. The net result
would be to delete two lines! The Jargon File follows hackish usage
throughout. Interestingly, a similar style is now preferred practice in Great
Britain, though the older style (which became established for typographical
reasons having to do with the aesthetics of comma and quotes in typeset text)
is still accepted there. Hart's Rules and the Oxford Dictionary for Writers
and Editors call the hacker-like style `new' or `logical' quoting. This
returns British English to the style many other languages (including Spanish,
French, Italian, Catalan, and German) have been using all along. Another
hacker habit is a tendency to distinguish between `scare' quotes and `speech'
quotes; that is, to use British-style single quotes for marking and reserve
American-style double quotes for actual reports of speech or text included
from elsewhere. Interestingly, some authorities describe this as correct
general usage, but mainstream American English has gone to using
double-quotes indiscriminately enough that hacker usage appears marked [and,
in fact, I thought this was a personal quirk of mine until I checked with
Usenet --ESR] One further permutation that is definitely not standard is a
hackish tendency to do marking quotes by using apostrophes (single quotes) in
pairs; that is, 'like this'. This is modelled on string and character literal
syntax in some programming languages (reinforced by the fact that many
character-only terminals display the apostrophe in typewriter style, as a
vertical single quote). One quirk that shows up frequently in the email style
of Unix hackers in particular is a tendency for some things that are normally
all-lowercase (including usernames and the names of commands and C routines)
to remain uncapitalized even when they occur at the beginning of sentences.
It is clear that, for many hackers, the case of such identifiers becomes a
part of their internal representation (the `spelling') and cannot be
overridden without mental effort (an appropriate reflex because Unix and C
both distinguish cases and confusing them can lead to lossage). A way of
escaping this dilemma is simply to avoid using these constructions at the
beginning of sentences. There seems to be a meta-rule behind these
nonstandard hackerisms to the effect that precision of expression is more
important than conformance to traditional rules; where the latter create
ambiguity or lose information they can be discarded without a second thought.
It is notable in this respect that other hackish inventions (for example, in
vocabulary) also tend to carry very precise shades of meaning even when
constructed to appear slangy and loose. In fact, to a hacker, the contrast
between `loose' form and `tight' content in jargon is a substantial part of
its humor! Hackers have also developed a number of punctuation and emphasis
conventions adapted to single-font all-ASCII communications links, and these
are occasionally carried over into written documents even when normal means
of font changes, underlining, and the like are available. One of these is
that TEXT IN ALL CAPS IS INTERPRETED AS `LOUD', and this becomes such an
ingrained synesthetic reflex that a person who goes to caps-lock while in
talk mode may be asked to "stop shouting, please, you're hurting my ears!".
Also, it is common to use bracketing with unusual characters to signify
emphasis. The asterisk is most common, as in "What the *hell*?" even though
this interferes with the common use of the asterisk suffix as a footnote
mark. The underscore is also common, suggesting underlining (this is
particularly common with book titles; for example, "It is often alleged that
Joe Haldeman wrote _The_Forever_War_ as a rebuttal to Robert Heinlein's
earlier novel of the future military, _Starship_Troopers_."). Other forms
exemplified by "=hell=", "\hell/", or "/hell/" are occasionally seen (it's
claimed that in the last example the first slash pushes the letters over to
the right to make them italic, and the second keeps them from falling over).
On FidoNet, you might see #bright# and ^dark^ text, which was actually
interpreted by some reader software. Finally, words may also be emphasized L
I K E T H I S, or by a series of carets (^) under them on the next line of
the text. There is a semantic difference between *emphasis like this* (which
emphasizes the phrase as a whole), and *emphasis* *like* *this* (which
suggests the writer speaking very slowly and distinctly, as if to a very
young child or a mentally impaired person). Bracketing a word with the `*'
character may also indicate that the writer wishes readers to consider that
an action is taking place or that a sound is being made. Examples: *bang*,
*hic*, *ring*, *grin*, *kick*, *stomp*, *mumble*. One might also see the
above sound effects as <bang>, <hic>, <ring>, <grin>, <kick>, <stomp>,
<mumble>. This use of angle brackets to mark their contents originally
derives from conventions used in BNF, but since about 1993 it has been
reinforced by the HTML markup used on the World Wide Web. Angle-bracket
enclosure is also used to indicate that a term stands for some random member
of a larger class (this is straight from BNF). Examples like the following
are common: So this <ethnic> walks into a bar one day... There is also an
accepted convention for `writing under erasure'; the text> Be nice to this
fool^H^H^H^Hgentleman, he's visiting from corporate HQ. reads roughly as "Be
nice to this fool, er, gentleman...", with irony emphasized. The digraph ^H
is often used as a print representation for a backspace, and was actually
very visible on old-style printing terminals. As the text was being composed
the characters would be echoed and printed immediately, and when a correction
was made the backspace keystrokes would be echoed with the string `^H'. Of
course, the final composed text would have no trace of the backspace
characters (or the original erroneous text). Accidental writing under erasure
occurs when using the Unix talk program to chat interactively to another
user. On a PC-style keyboard most users instinctively press the backspace key
to delete mistakes, but this may not achieve the desired effect, and merely
displays a ^H symbol. The user typically presses backspace a few times before
their brain realises the problem -- especially likely if the user is a
touch-typist -- and since each character is transmitted as soon as it is
typed, Freudian slips and other inadvertent admissions are (barring network
delays) clearly visible for the other user to see. Deliberate use of ^H for
writing under erasure parallels (and may have been influenced by) the ironic
use of `slashouts' in science-fiction fanzines. A related habit uses editor
commands to signify corrections to previous text. This custom faded in email
as more mailers got good editing capabilities, only to take on new life on
IRCs and other line-based chat systems. charlie: I've seen that term used on
alt.foobar often. lisa: Send it to Erik for the File. lisa:
Oops...s/Erik/Eric/. The s/Erik/Eric/ says "change Erik to Eric in the
preceding". This syntax is borrowed from the Unix editing tools ed and sed,
but is widely recognized by non-Unix hackers as well. In a formula, *
signifies multiplication but two asterisks in a row are a shorthand for
exponentiation (this derives from FORTRAN, and is also used in Ada). Thus,
one might write 2 ** 8 = 256. Another notation for exponentiation one sees
more frequently uses the caret (^, ASCII 1011110); one might write instead
2^8 = 256. This goes all the way back to Algol-60, which used the archaic
ASCII `up-arrow' that later became the caret; this was picked up by Kemeny
and Kurtz's original BASIC, which in turn influenced the design of the bc(1)
and dc(1) Unix tools, which have probably done most to reinforce the
convention on Usenet. (TeX math mode also uses ^ for exponention.) The
notation is mildly confusing to C programmers, because ^ means bitwise
exclusive-or in C. Despite this, it was favored 3:1 over ** in a late-1990
snapshot of Usenet. It is used consistently in this lexicon. In on-line
exchanges, hackers tend to use decimal forms or improper fractions (`3.5' or
`7/2') rather than `typewriter style' mixed fractions (`3-1/2'). The major
motive here is probably that the former are more readable in a monospaced
font, together with a desire to avoid the risk that the latter might be read
as `three minus one-half'. The decimal form is definitely preferred for
fractions with a terminating decimal representation; there may be some
cultural influence here from the high status of scientific notation. Another
on-line convention, used especially for very large or very small numbers, is
taken from C (which derived it from FORTRAN). This is a form of `scientific
notation' using `e' to replace `*10^'; for example, one year is about 3e7
(that is, 3 × 10 7) seconds long. The tilde (~) is commonly used in a
quantifying sense of `approximately'; that is, ~50 means `about fifty'. On
Usenet and in the MUD world, common C boolean, logical, and relational
operators such as |, &, ||, &&, !, ==, !=, >, <, >=, and <= are often
combined with English. The Pascal not-equals, <>, is also recognized, and
occasionally one sees /= for not-equals (from Ada, Common Lisp, and Fortran
90). The use of prefix `!' as a loose synonym for `not-' or `no-' is
particularly common; thus, `!clue' is read `no-clue' or `clueless'. A related
practice borrows syntax from preferred programming languages to express ideas
in a natural-language text. For example, one might see the following: In
<jrh578689@thudpucker.com> J. R. Hacker wrote: <I recently had occasion to
field-test the Snafu <Systems 2300E adaptive gonkulator. The price was
<right, and the racing stripe on the case looked <kind of neat, but its
performance left something <to be desired. Yeah, I tried one out too. #ifdef
FLAME Hasn't anyone told those idiots that you can't get decent bogon
suppression with AFJ filters at today's net volumes? #endif /* FLAME */ I
guess they figured the price premium for true frame-based semantic analysis
was too high. Unfortunately, it's also the only workable approach. I wouldn't
recommend purchase of this product unless you're on a *very* tight budget.
#include <disclaimer.h> -- == Frank Foonly (Fubarco Systems) In the above,
the #ifdef/#endif pair is a conditional compilation syntax from C; here, it
implies that the text between (which is a flame) should be evaluated only if
you have turned on (or defined on) the switch FLAME. The #include at the end
is C for "include standard disclaimer here"; the `standard disclaimer' is
understood to read, roughly, "These are my personal opinions and not to be
construed as the official position of my employer." The top section in the
example, with < at the left margin, is an example of an inclusion convention
we'll discuss below. More recently, following on the huge popularity of the
World Wide Web, pseudo-HTML markup has become popular for similar purposes:
<flame> Your mother was a hamster and your father smelt of elderberries!
</flame> You'll even see this with an HTML-style attribute modifier: <flame
intensity="100%"> You seem well-suited for a career in government. </flame>
Another recent (late 1990s) construction now common on Usenet seems to be
borrowed from Unix shell syntax or Perl. It consists of using a dollar sign
before an uppercased form of a word or acronym to suggest any random member
of the class indicated by the word. Thus: `$PHB' means "any random member of
the class `Pointy-Haired Boss'". Hackers also mix letters and numbers more
freely than in mainstream usage. In particular, it is good hackish style to
write a digit sequence where you intend the reader to understand the text
string that names that number in English. So, hackers prefer to write `1970s'
rather than `nineteen-seventies' or `1970's' (the latter looks like a
possessive). It should also be noted that hackers exhibit much less
reluctance to use multiply-nested parentheses than is normal in English. Part
of this is almost certainly due to influence from LISP (which uses deeply
nested parentheses (like this (see?)) in its syntax a lot), but it has also
been suggested that a more basic hacker trait of enjoying playing with
complexity and pushing systems to their limits is in operation. Finally, it
is worth mentioning that many studies of on-line communication have shown
that electronic links have a de-inhibiting effect on people. Deprived of the
body-language cues through which emotional state is expressed, people tend to
forget everything about other parties except what is presented over that
ASCII link. This has both good and bad effects. A good one is that it
encourages honesty and tends to break down hierarchical authority
relationships; a bad one is that it may encourage depersonalization and
gratuitous rudeness. Perhaps in response to this, experienced netters often
display a sort of conscious formal politesse in their writing that has passed
out of fashion in other spoken and written media (for example, the phrase
"Well said, sir!" is not uncommon). Many introverted hackers who are next to
inarticulate in person communicate with considerable fluency over the net,
perhaps precisely because they can forget on an unconscious level that they
are dealing with people and thus don't feel stressed and anxious as they
would face to face. Though it is considered gauche to publicly criticize
posters for poor spelling or grammar, the network places a premium on
literacy and clarity of expression. It may well be that future historians of
literature will see in it a revival of the great tradition of personal
letters as art. Chapter 6. Email Quotes and Inclusion Conventions One area
where conventions for on-line writing are still in some flux is the marking
of included material from earlier messages -- what would be called `block
quotations' in ordinary English. From the usual typographic convention
employed for these (smaller font at an extra indent), there derived a
practice of included text being indented by one ASCII TAB (0001001)
character, which under Unix and many other environments gives the appearance
of an 8-space indent. Early mail and netnews readers had no facility for
including messages this way, so people had to paste in copy manually. BSD
Mail(1) was the first message agent to support inclusion, and early
Usenetters emulated its style. But the TAB character tended to push included
text too far to the right (especially in multiply nested inclusions), leading
to ugly wraparounds. After a brief period of confusion (during which an
inclusion leader consisting of three or four spaces became established in
EMACS and a few mailers), the use of leading > or > became standard, perhaps
owing to its use in ed(1) to display tabs (alternatively, it may derive from
the > that some early Unix mailers used to quote lines starting with "From"
in text, so they wouldn't look like the beginnings of new message headers).
Inclusions within inclusions keep their > leaders, so the `nesting level' of
a quotation is visually apparent. The practice of including text from the
parent article when posting a followup helped solve what had been a major
nuisance on Usenet: the fact that articles do not arrive at different sites
in the same order. Careless posters used to post articles that would begin
with, or even consist entirely of, "No, that's wrong" or "I agree" or the
like. It was hard to see who was responding to what. Consequently, around
1984, new news-posting software evolved a facility to automatically include
the text of a previous article, marked with "> " or whatever the poster
chose. The poster was expected to delete all but the relevant lines. The
result has been that, now, careless posters post articles containing the
entire text of a preceding article, followed only by "No, that's wrong" or "I
agree". Many people feel that this cure is worse than the original disease,
and there soon appeared newsreader software designed to let the reader skip
over included text if desired. Today, some posting software rejects articles
containing too high a proportion of lines beginning with `>' -- but this too
has led to undesirable workarounds, such as the deliberate inclusion of
zero-content filler lines which aren't quoted and thus pull the message below
the rejection threshold. Inclusion practice is still evolving, and disputes
over the `correct' inclusion style occasionally lead to holy wars. Most
netters view an inclusion as a promise that comment on it will immediately
follow. The preferred, conversational style looks like this, > relevant
excerpt 1 response to excerpt > relevant excerpt 2 response to excerpt >
relevant excerpt 3 response to excerpt or for short messages like this: >
entire message response to message Thanks to poor design of some PC-based
mail agents (notably Microsoft Outlook and Outlook Express), one will
occasionally see the entire quoted message after the response, like this
response to message > entire message but this practice is strongly
deprecated. Though > remains the standard inclusion leader, | is occasionally
used for extended quotations where original variations in indentation are
being retained (one mailer even combines these and uses |>). One also sees
different styles of quoting a number of authors in the same message: one
(deprecated because it loses information) uses a leader of > for everyone,
another (the most common) is > > > > , > > > , etc. (or >>>> , >>>, etc.,
depending on line length and nesting depth) reflecting the original order of
messages, and yet another is to use a different citation leader for each
author, say > , : , | , @ (preserving nesting so that the inclusion order of
messages is still apparent, or tagging the inclusions with authors' names).
Yet another style is to use each poster's initials (or login name) as a
citation leader for that poster. Occasionally one sees a # leader used for
quotations from authoritative sources such as standards documents; the
intended allusion is to the root prompt (the special Unix command prompt
issued when one is running as the privileged super-user). Chapter 7. Hacker
Speech Style Hackish speech generally features extremely precise diction,
careful word choice, a relatively large working vocabulary, and relatively
little use of contractions or street slang. Dry humor, irony, puns, and a
mildly flippant attitude are highly valued -- but an underlying seriousness
and intelligence are essential. One should use just enough jargon to
communicate precisely and identify oneself as a member of the culture;
overuse of jargon or a breathless, excessively gung-ho attitude is considered
tacky and the mark of a loser. This speech style is a variety of the
precisionist English normally spoken by scientists, design engineers, and
academics in technical fields. In contrast with the methods of jargon
construction, it is fairly constant throughout hackerdom. It has been
observed that many hackers are confused by negative questions -- or, at
least, that the people to whom they are talking are often confused by the
sense of their answers. The problem is that they have done so much
programming that distinguishes between if (going) ... and if (!going) ...
that when they parse the question "Aren't you going?" it may seem to be
asking the opposite question from "Are you going?", and so to merit an answer
in the opposite sense. This confuses English-speaking non-hackers because
they were taught to answer as though the negative part weren't there. In some
other languages (including Russian, Chinese, and Japanese) the hackish
interpretation is standard and the problem wouldn't arise. Hackers often find
themselves wishing for a word like French `si', German `doch', or Dutch
`jawel' -- a word with which one could unambiguously answer `yes' to a
negative question. (see also mu) For similar reasons, English-speaking
hackers almost never use double negatives, even if they live in a region
where colloquial usage allows them. The thought of uttering something that
logically ought to be an affirmative knowing it will be misparsed as a
negative tends to disturb them. In a related vein, hackers sometimes make a
game of answering questions containing logical connectives with a strictly
literal rather than colloquial interpretation. A non-hacker who is indelicate
enough to ask a question like "So, are you working on finding that bug now or
leaving it until later?" is likely to get the perfectly correct answer "Yes!"
(that is, "Yes, I'm doing it either now or later, and you didn't ask
which!"). Chapter 8. International Style Although the Jargon File remains
primarily a lexicon of hacker usage in American English, we have made some
effort to get input from abroad. Though the hacker-speak of other languages
often uses translations of jargon from English (often as transmitted to them
by earlier Jargon File versions!), the local variations are interesting, and
knowledge of them may be of some use to travelling hackers. There are some
references herein to `Commonwealth hackish'. These are intended to describe
some variations in hacker usage as reported in the English spoken in Great
Britain and the Commonwealth (Canada, Australia, India, etc. -- though Canada
is heavily influenced by American usage). There is also an entry on
Commonwealth Hackish reporting some general phonetic and vocabulary
differences from U.S. hackish. Hackers in Western Europe and (especially)
Scandinavia report that they often use a mixture of English and their native
languages for technical conversation. Occasionally they develop idioms in
their English usage that are influenced by their native-language styles. Some
of these are reported here. On the other hand, English often gives rise to
grammatical and vocabulary mutations in the native language. For example,
Italian hackers often use the nonexistent verbs `scrollare' (to scroll) and
`deletare' (to delete) rather than native Italian scorrere and cancellare.
Similarly, the English verb `to hack' has been seen conjugated in Swedish. In
German, many Unix terms in English are casually declined as if they were
German verbs -- thus: mount/mounten/gemountet; grep/grepen/gegrept;
fork/forken/geforkt; core dump/core-dumpen, gecoredumpt. And Spanish-speaking
hackers use `linkear' (to link), `debugear' (to debug), and `lockear' (to
lock). European hackers report that this happens partly because the English
terms make finer distinctions than are available in their native
vocabularies, and partly because deliberate language-crossing makes for
amusing wordplay. A few notes on hackish usages in Russian have been added
where they are parallel with English idioms and thus comprehensible to
English-speakers. Chapter 9. Crackers, Phreaks, and Lamers From the early
1980s onward, a flourishing culture of local, MS-DOS-based bulletin boards
developed separately from Internet hackerdom. The BBS culture has, as its
seamy underside, a stratum of `pirate boards' inhabited by crackers, phone
phreaks, and warez d00dz. These people (mostly teenagers running IBM-PC
clones from their bedrooms) have developed their own characteristic jargon,
heavily influenced by skateboard lingo and underground-rock slang. While BBS
technology essentially died out after the Great Internet Explosion, the
cracker culture moved to IRC and other Internet-based network channels and
maintained a semi-underground existence. Though crackers often call
themselves `hackers', they aren't (they typically have neither significant
programming ability, nor Internet expertise, nor experience with UNIX or
other true multi-user systems). Their vocabulary has little overlap with
hackerdom's, and hackers regard them with varying degrees of contempt. But
ten years on the brightest crackers tend to become hackers, and sometimes to
recall their origins by using cracker slang in a marked and heavily ironic
way. This lexicon covers much of cracker slang (which is often called
"leet-speak") so the reader will be able to understand both what leaks out of
the cracker underground and the occasional ironic use by hackers. Here is a
brief guide to cracker and warez d00dz usage: * Misspell frequently. The
substitutions phone -> fone and freak -> phreak are obligatory. * Always
substitute `z's for `s's. (i.e. "codes" -> "codez"). The substitution of `z'
for `s' has evolved so that a `z' is now systematically put at the end of
words to denote an illegal or cracking connection. Examples : Appz,
passwordz, passez, utilz, MP3z, distroz, pornz, sitez, gamez, crackz,
serialz, downloadz, FTPz, etc. * Type random emphasis characters after a post
line (i.e. "Hey Dudes!#!$#$!#!$"). * Use the emphatic `k' prefix ("k-kool",
"k-rad", "k-awesome") frequently. * Abbreviate compulsively ("I got lotsa
warez w/ docs"). * TYPE ALL IN CAPS LOCK, SO IT LOOKS LIKE YOU'RE YELLING ALL
THE TIME. The following letter substitutions are common: a -> 4 e -> 3 f ->
ph i -> 1 or | l -> | or 1 m -> |\/| n -> |\| o -> 0 s -> 5 t -> 7 or + Thus,
"elite" comes out "31337" and "all your base are belong to us" becomes "4ll
y0ur b4s3 4r3 b3l0ng t0 us", Other less common substitutions include: b -> 8
c -> ( or k or |< or /< d -> <| g -> 6 or 9 h -> |-| k -> |< or /< p -> |2 u
-> |_| v -> / or \/ w -> // or \/\/ x -> >< y -> '/ The word "cool" is
spelled "kewl" and normally used ironically; when crackers really want to
praise something they use the prefix "uber" (from German) which comes out
"ub3r" or even "|_|83r" These traits are similar to those of B1FF, who
originated as a parody of naive BBS users; also of his latter-day equivalent
Jeff K.. Occasionally, this sort of distortion may be used as heavy sarcasm
or ironically by a real hacker, as in: > I got X Windows running under Linux!
d00d! u R an 31337 hax0r The words "hax0r" for "hacker" and "sux0r" for
"sucks" are the most common references; more generally, to mark a term as
cracker-speak one may add "0r" or "xor". Examples: "The nightly build is
sux0r today." "Gotta go reboot those b0x0rz." "Man, I really ought to fix0r
my .fetchmailrc." "Yeah, well he's a 'leet VMS operat0r now, so he's too good
for u s." The only practice resembling this in native hacker usage is the
substitution of a dollar sign of `s' in names of products or service felt to
be excessively expensive, e.g. Compu$erve, Micro$oft. For further discussion
of the pirate-board subculture, see lamer, elite, leech, poser, cracker, and
especially warez d00dz, banner site, ratio site, leech mode. Chapter 10.
Pronunciation Guide Pronunciation keys are provided in the jargon listings
for all entries that are neither dictionary words pronounced as in standard
English nor obvious compounds thereof. Slashes bracket phonetic
pronunciations, which are to be interpreted using the following conventions:
Syllables are hyphen-separated, except that an accent or back-accent follows
each accented syllable (the back-accent marks a secondary accent in some
words of four or more syllables). If no accent is given, the word is
pronounced with equal accentuation on all syllables (this is common for
abbreviations). Consonants are pronounced as in American English. The letter
`g' is always hard (as in "got" rather than "giant"); `ch' is soft ("church"
rather than "chemist"). The letter `j' is the sound that occurs twice in
"judge". The letter `s' is always as in "pass", never a z sound. The digraph
`kh' is the guttural of "loch" or "l'chaim". The digraph `gh' is the
aspirated g+h of "bughouse" or "ragheap" (rare in English). Uppercase letters
are pronounced as their English letter names; thus (for example) /H-L-L/ is
equivalent to /aych el el/. /Z/ may be pronounced /zee/ or /zed/ depending on
your local dialect. Vowels are represented as follows: Table 10.1. Vowels a
back, that ah father, palm (see note) ar far, mark aw flaw, caught ay bake,
rain e less, men ee easy, ski eir their, software i trip, hit i: life, sky o
block, stock (see note) oh flow, sew oo loot, through or more, door ow out,
how oy boy, coin uh but, some u put, foot y yet, young yoo few, chew [y]oo
/oo/ with optional fronting as in `news' (/nooz/ or /nyooz/) The glyph /@/ is
used for the `schwa' sound of unstressed or occluded vowels. The schwa vowel
is omitted in syllables containing vocalic r, l, m or n; that is, `kitten'
and `color' would be rendered /kit'n/ and /kuhl'r/, not /kit'@n/ and
/kuhl'@r/. Note that the above table reflects mainly distinctions found in
standard American English (that is, the neutral dialect spoken by TV network
announcers and typical of educated speech in the Upper Midwest, Chicago,
Minneapolis/St. Paul and Philadelphia). However, we separate /o/ from /ah/,
which tend to merge in standard American. This may help readers accustomed to
accents resembling British Received Pronunciation. The intent of this scheme
is to permit as many readers as possible to map the pronunciations into their
local dialect by ignoring some subset of the distinctions we make. Speakers
of British RP, for example, can smash terminal /r/ and all unstressed vowels.
Speakers of many varieties of southern American will automatically map /o/ to
/aw/; and so forth. (Standard American makes a good reference dialect for
this purpose because it has crisp consonants and more vowel distinctions than
other major dialects, and tends to retain distinctions between unstressed
vowels. It also happens to be what your editor speaks.) Entries with a
pronunciation of `//' are written-only usages. (No, Unix weenies, this does
not mean `pronounce like previous pronunciation'!) Chapter 11. Other Lexicon
Conventions Entries are sorted in case-blind ASCII collation order (rather
than the letter-by-letter order ignoring interword spacing common in
mainstream dictionaries), except that all entries beginning with
nonalphabetic characters are sorted before A, except that leading dash is
ignored. The case-blindness is a feature, not a bug. Prefix ** is used as
linguists do; to mark examples of incorrect usage. We follow the `logical'
quoting convention described in the Writing Style section above. In addition,
we reserve double quotes for actual excerpts of text or (sometimes invented)
speech. Scare quotes (which mark a word being used in a nonstandard way), and
philosopher's quotes (which turn an utterance into the string of letters or
words that name it) are both rendered with single quotes. References such as
malloc(3) and patch(1) are to Unix facilities (some of which, such as
patch(1), are actually open source distributed over Usenet). The Unix manuals
use foo(n) to refer to item foo in section (n) of the manual, where n=1 is
utilities, n=2 is system calls, n=3 is C library routines, n=6 is games, and
n=8 (where present) is system administration utilities. Sections 4, 5, and 7
of the manuals have changed roles frequently and in any case are not referred
to in any of the entries. Various abbreviations used frequently in the
lexicon are summarized here: Table 11.1. Abbreviations abbrev. abbreviation
adj. adjective adv. adverb alt. alternate cav. caveat conj. conjunction esp.
especially excl. exclamation imp. imperative interj. interjection n. noun
obs. obsolete pl. plural poss. possibly pref. prefix prob. probably prov.
proverbial quant. quantifier suff. suffix syn. synonym (or synonymous with)
v. verb (may be transitive or intransitive) var. variant vi. intransitive
verb vt. transitive verb Where alternate spellings or pronunciations are
given, alt. separates two possibilities with nearly equal distribution, while
var. prefixes one that is markedly less common than the primary. Where a term
can be attributed to a particular subculture or is known to have originated
there, we have tried to so indicate. Here is a list of abbreviations used in
etymologies: Table 11.2. Origins Amateur Packet Radio A technical culture of
ham-radio sites using AX.25 and TCP/IP for wide-area networking and BBS
systems. Berkeley University of California at Berkeley BBN Bolt, Beranek &
Newman Cambridge the university in England (not the city in Massachusetts
where MIT happens to be located!) CMU Carnegie-Mellon University Commodore
Commodore Business Machines DEC The Digital Equipment Corporation (now HP).
Fairchild The Fairchild Instruments Palo Alto development group FidoNet see
the FidoNet entry IBM International Business Machines MIT Massachusetts
Institute of Technology; esp. the legendary MIT AI Lab culture of roughly
1971 to 1983 and its feeder groups, including the Tech Model Railroad Club
NRL Naval Research Laboratories NYU New York University OED The Oxford
English Dictionary Purdue Purdue University SAIL Stanford Artificial
Intelligence Laboratory (at Stanford University) SI From Système
International, the name for the standard abbreviations of metric nomenclature
used in the sciences Stanford Stanford University Sun Sun Microsystems TMRC
Some MITisms go back as far as the Tech Model Railroad Club (TMRC) at MIT c.
1960. Material marked TMRC is from An Abridged Dictionary of the TMRC
Language, originally compiled by Pete Samson in 1959 UCLA University of
California, Los Angeles UK the United Kingdom (England, Wales, Scotland,
Northern Ireland) Usenet see the Usenet entry WPI Worcester Polytechnic
Institute, site of a very active community of PDP-10 hackers during the 1970s
WWW The World-Wide-Web. XEROX PARC XEROX's Palo Alto Research Center, site of
much pioneering research in user interface design and networking Yale Yale
University Other etymology abbreviations such as Unix and PDP-10 refer to
technical cultures surrounding specific operating systems, processors, or
other environments. The fact that a term is labelled with any one of these
abbreviations does not necessarily mean its use is confined to that culture.
In particular, many terms labelled `MIT' and `Stanford' are in quite general
use. We have tried to give some indication of the distribution of speakers in
the usage notes; however, a number of factors mentioned in the introduction
conspire to make these indications less definite than might be desirable. A
few new definitions attached to entries are marked [proposed]. These are
usually generalizations suggested by editors or Usenet respondents in the
process of commenting on previous definitions of those entries. These are not
represented as established jargon. Chapter 12. Format for New Entries We
welcome new jargon, and corrections to or amplifications of existing entries.
You can improve your submission's chances of being included by adding
background information on user population and years of currency. References
to actual usage via URLs and/or Google pointers are particularly welcomed.
All contributions and suggestions about the Jargon File will be considered
donations to be placed in the public domain as part of this File, and may be
used in subsequent paper editions. Submissions may be edited for accuracy,
clarity and concision. We are looking to expand the File's range of technical
specialties covered. There are doubtless rich veins of jargon yet untapped in
the scientific computing, graphics, and networking hacker communities; also
in numerical analysis, computer architectures and VLSI design, language
design, and many other related fields. Send us your jargon! We are not
interested in straight technical terms explained by textbooks or technical
dictionaries unless an entry illuminates `underground' meanings or aspects
not covered by official histories. We are also not interested in `joke'
entries -- there is a lot of humor in the file but it must flow naturally out
of the explanations of what hackers do and how they think. It is OK to submit
items of jargon you have originated if they have spread to the point of being
used by people who are not personally acquainted with you. We prefer items to
be attested by independent submission from two different sites. The Jargon
File will be regularly maintained and made available for browsing on the
World Wide Web, and will include a version number. Read it, pass it around,
contribute -- this is your monument! The Jargon Lexicon [crunchly-1.png] The
Crunchly saga begins here. (The next cartoon in the Crunchly saga is
73-05-18.) The infamous Crunchly cartoons by The Great Quux are woven into
the lexicon, each next to an appropriate entry. To read them in the sequence
in which they were written, chase pointers from here using the `next cartoon'
information in the captions. A few don't have next pointers; these are
vignettes from the 1973 Crunchland tableau spread that inaugurated the strip.
Here is a framed version of the glossary. Table of Contents Glossary Glossary
0 (TM) /dev/null /me 0 1TBS 2 404 404 compliant @-party A abbrev ABEND
accumulator ACK Acme ad-hockery address harvester adger admin ADVENT adware
AFAIK AFJ AFK AI AI-complete airplane rule Alderson loop aliasing bug Alice
and Bob All hardware sucks, all software sucks. all your base are belong to
us alpha geek alpha particles alt alt bit Aluminum Book ambimouseterous Amiga
Amiga Persecution Complex amp off amper and there was much rejoicing Angband
angle brackets angry fruit salad annoybot annoyware ANSI standard ANSI
standard pizza anti-idiotarianism AOL! app Archimedes arena arg ARMM
armor-plated asbestos asbestos cork award asbestos longjohns ASCII ASCII art
ASCIIbetical order astroturfing atomic attoparsec Aunt Tillie AUP
autobogotiphobia autoconfiscate automagically avatar awk B B1FF B5 back door
backbone cabal backbone site backgammon background backreference backronym
backward combatability BAD Bad and Wrong Bad Thing bag on the side bagbiter
bagbiting baggy pantsing balloonian variable bamf banana problem bandwidth
bang bang on bang path banner banner ad banner site bar bare metal barf
barfmail barfulation barfulous barn barney baroque BASIC batbelt batch
bathtub curve Batman factor baud baz bazaar bboard BBS BCPL BDFL beam beanie
key beep Befunge beige toaster bells and whistles bells whistles and gongs
benchmark Berkeley Quality Software Berzerkeley beta BFI BI bible
BiCapitalization biff big iron Big Red Switch Big Room big win big-endian
bignum bigot bikeshedding binary four bit bit bang bit bashing bit bucket bit
decay bit rot bit twiddling bit-paired keyboard bitblt bits bitty box bixie
black art black hat black hole black magic Black Screen of Death blammo
blargh blast blat bletch bletcherous blinkenlights blit blitter blivet
bloatware BLOB block blog Bloggs Family blogosphere blogrolling blow an EPROM
blow away blow out blow past blow up BLT blue box Blue Glue blue goo Blue
Screen of Death blue wire blurgle BNF boa board boat anchor bob bodge BOF
BOFH bogo-sort bogometer BogoMIPS bogon bogon filter bogon flux bogosity
bogotify bogue out bogus Bohr bug boink bomb bondage-and-discipline language
bonk/oif book titles boot Borg borken bot bottom feeder bottom-post bottom-up
implementation bounce bounce message boustrophedon box boxed comments boxen
boxology bozotic brain dump brain fart brain-damaged brain-dead braino
brainwidth bread crumbs break break-even point breath-of-life packet breedle
Breidbart Index brick bricktext bring X to its knees brittle broadcast storm
broken broken arrow broken-ring network BrokenWindows broket Brooks's Law
brown-paper-bag bug browser BRS brute force brute force and ignorance BSD
BSOD BUAF BUAG bubble sort bucky bits buffer chuck buffer overflow bug
bug-compatible bug-for-bug compatible bug-of-the-month club bulletproof
bullschildt bump burble buried treasure burn a CD burn-in period burst page
busy-wait buzz buzzword-compliant BWQ by hand byte byte sex bytesexual Bzzzt!
Wrong. C C C Programmer's Disease C&C C++ calculator Camel Book camelCase
camelCasing can't happen cancelbot Cancelmoose[tm] candygrammar canonical
careware cargo cult programming cascade case and paste case mod casters-up
mode casting the runes cat catatonic cathedral cd tilde CDA cdr chad chad box
chain chainik channel channel hopping channel op chanop char charityware
chase pointers chawmp check cheerfully chemist Chernobyl chicken Chernobyl
packet chicken head chickenboner chiclet keyboard Chinese Army technique
choad choke chomp chomper CHOP Christmas tree Christmas tree packet chrome
chug Church of the SubGenius CI$ Cinderella Book Classic C clean click of
death CLM clobber clock clocks clone clone-and-hack coding clover key
clue-by-four clustergeeking co-lo coaster coaster toaster COBOL COBOL fingers
cobweb site code code grinder code monkey Code of the Geeks code police codes
codewalker coefficient of X cokebottle cold boot COME FROM comm mode command
key comment out Commonwealth Hackish compact compiler jock compo compress
Compu$erve computer confetti computron con condition out condom confuser
connector conspiracy cons considered harmful console console jockey
content-free control-C control-O control-Q control-S Conway's Law cookbook
cooked mode cookie cookie bear cookie file cookie jar cookie monster copious
free time copper copy protection copybroke copycenter copyleft copyparty
copywronged core core cancer core dump core leak Core Wars cosmic rays cough
and die courier cow orker cowboy CP/M CPU Wars crack crack root cracker
cracking crank crapplet CrApTeX crash crash and burn crawling horror CRC
handbook creationism creep creeping elegance creeping featurism creeping
featuritis cretin cretinous crippleware critical mass crlf crock cross-post
crossload crudware cruft cruft together cruftsmanship crufty crumb crunch
cryppie cthulhic CTSS cube cup holder cursor dipped in X cuspy cut a tape
cybercrud cyberpunk cyberspace cycle cycle of reincarnation cycle server
cypherpunk C|N>K D daemon daemon book dahmum dancing frog dangling pointer
dark-side hacker Datamation DAU Dave the Resurrector day mode dd DDT de-rezz
dead dead beef attack dead code dead-tree version DEADBEEF deadlock deadly
embrace death code Death Square Death Star Death, X of DEC DEC Wars decay
deckle DED deep hack mode deep magic deep space defenestration defined as
deflicted dehose Dejagoo deletia deliminator delint delta demented demigod
demo demo mode demoeffect demogroup demon demon dialer demoparty demoscene
dentro depeditate deprecated derf deserves to lose despew dickless
workstation dictionary flame diddle die die horribly diff dike Dilbert ding
dink dinosaur dinosaur pen dinosaurs mating dirtball dirty power disclaimer
Discordianism disemvowel disk farm display hack dispress Dissociated Press
distribution distro disusered DMZ do protocol doc documentation dodgy dogcow
dogfood dogpile dogwash Don't do that then! dongle dongle-disk Doom, X of
doorstop DoS attack dot file double bucky doubled sig down download DP DPer
Dr. Fred Mbogo dragon Dragon Book drain dread high-bit disease dread
questionmark disease DRECNET driver droid drone drool-proof paper drop on the
floor drop-ins drop-outs drugged drum drunk mouse syndrome DSW dub dub dub
Duff's device dumb terminal dumbass attack dumbed down dump dumpster diving
dusty deck DWIM dynner E Easter egg Easter egging eat flaming death EBCDIC
ECP ed egg egosurf eighty-column mind El Camino Bignum elder days elegant
elephantine elevator controller elite ELIZA effect elvish EMACS email
emoticon EMP empire engine English enhancement ENQ EOD EOF EOL EOU epoch
epsilon epsilon squared era Eric Conspiracy Eris erotics error 33 eurodemo
evil evil and rude Evil Empire exa- examining the entrails EXCH excl EXE exec
exercise, left as an Exon Exploder exploit external memory eye candy eyeball
search F face time factor fairings fall over fall through fan fandango on
core FAQ FAQ list FAQL faradize farkled farm fascist fat electrons fat pipe
fat-finger faulty fear and loathing feature feature creature feature creep
feature key feature shock featurectomy feep feeper feeping creature feeping
creaturism feetch feetch fence fencepost error fiber-seeking backhoe FidoNet
field circus field servoid file signature filk film at 11 filter Finagle's
Law fine finger finger trouble finger-pointing syndrome finn firebottle
firefighting firehose syndrome firewall code firewall machine fireworks mode
firmware fish FISH queue fisking FITNR fix FIXME flag flag day flaky flamage
flame flame bait flame on flame war flamer flap flarp flash crowd flat
flat-ASCII flat-file flatten flavor flavorful flippy flood flowchart flower
key flush flypage Flyspeck 3 flytrap FM fnord FOAF FOD fold case followup
fontology foo foobar fool fool file Foonly footprint for free for the rest of
us for values of fora foreground fork fork bomb forked Formosa's Law Fortrash
fortune cookie forum fossil four-color glossies frag fragile Frankenputer
fred Fred Foobar frednet free software freeware freeze fried frink friode
fritterware frob frobnicate frobnitz frog frogging front end frotz frotzed
frowney FRS fry fscking FSF -fu FUBAR fuck me harder FUD FUD wars fudge fudge
factor fuel up Full Monty fum functino funky funny money furrfu G G gang bang
Gang of Four garbage collect garply gas Gates's Law gawble GC GCOS GECOS
gedanken geef geek geek code geek out geekasm gen gender mender General
Public Virus generate Genius From Mars Technique gensym Get a life! Get a
real computer! GandhiCon gib GIFs at 11 gig giga- GIGO gilley gillion ginger
GIPS GIYF glark glass glass tty glassfet glitch glob glork glue gnarly GNU
gnubie GNUMACS go flatline go gold go root go-faster stripes GoAT goat file
gobble Godwin's Law Godzillagram golden golf-ball printer gonk gonkulator
gonzo Good Thing google google juice gopher gopher hole gorets gorilla arm
gorp GOSMACS gotcha GPL GPV gray goo gray hat Great Internet Explosion Great
Renaming Great Runes Great Worm great-wall green bytes green card green
lightning green machine Green's Theorem greenbar grep gribble grilf grind
grind crank gritch grok gronk gronk out gronked grovel grue grunge gubbish
Guido guiltware gumby gunch gunpowder chicken guru guru meditation gweep GWF
H h ha ha only serious hack hack attack hack mode hack on hack together hack
up hack value hacked off hacked up hacker hacker ethic hacker humor Hackers
(the movie) hacking run Hacking X for Y Hackintosh hackish hackishness
hackitude hair hairball hairy HAKMEM hakspek Halloween Documents ham hammer
hamster HAND hand cruft hand-hacking hand-roll handle handshaking handwave
hang Hanlon's Razor happily hard boot hardcoded hardwarily hardwired has the
X nature hash bucket hash collision hat HCF heads down heartbeat heatseeker
heavy metal heavy wizardry heavyweight Hed Rat heisenbug hell desk hello
sailor! hello world hello, wall! hex hexadecimal hexit HHOK HHOS hidden flag
high bit high moby highly hing hired gun hirsute HLL hoarding hog hole
hollised holy penguin pee holy wars home box home machine home page honey pot
hook hop horked hose hosed hot chat hot spot hotlink house wizard HP-SUX HTH
huff hung hungry puppy hungus hyperspace hysterical reasons I I didn't change
anything! I see no X here. I for one welcome our new X overlords IANAL IBM
ICBM address ice ID10T error idempotent IDP If you want X, you know where to
find it. ifdef out IIRC ill-behaved IMHO Imminent Death Of The Net Predicted!
in the extreme incantation include include war indent style Indent-o-Meter
index of X infant mortality infinite infinite loop Infinite-Monkey Theorem
infinity inflate Infocom initgame insanely great installfest INTERCAL
InterCaps interesting Internet Internet Death Penalty Internet Exploder
Internet Exploiter interrupt interrupts locked out intertwingled intro IRC
iron Iron Age iron box ironmonger ISO standard cup of tea ISP Itanic ITS
IWBNI IYFEG J J. Random J. Random Hacker jack in jaggies Java JCL JEDR Jeff
K. jello Jeopardy-style quoting jibble jiffy job security jock joe code
joe-job juggling eggs juice jump off into never-never land jupiter K K K&R k-
kahuna kamikaze packet kangaroo code ken kernel-of-the-week club kgbvax KIBO
kiboze kibozo kick kill file killer app killer micro killer poke kilo-
kilogoogle KIPS KISS Principle kit KLB klone kludge kluge kluge around kluge
up Knights of the Lambda Calculus knobs knurd Knuth koan kook Kool-Aid
kremvax kyrka L lag lamer LAN party language lawyer languages of choice LART
larval stage lase laser chicken leaf site leak leaky heap leapfrog attack
leech leech mode legal legalese lenna LER LERP let the smoke out letterbomb
lexer life Life is hard light pipe lightweight like kicking dead whales down
the beach like nailing jelly to a tree line 666 line eater, the line noise
linearithmic link farm link rot link-dead lint Lintel Linus Linux lion food
Lions Book LISP list-bomb lithium lick little-endian live live data Live Free
Or Die! livelock liveware lobotomy locals, the locked and loaded locked up
logic bomb logical loop through loose bytes lord high fixer lose lose lose
loser losing loss lossage lossy lost in the noise lost in the underflow lots
of MIPS but no I/O low-bandwidth Lubarsky's Law of Cybernetic Entomology
Lumber Cartel lunatic fringe lurker luser M M M$ macdink machoflops Macintoy
Macintrash macro macro- macrology maggotbox magic magic cookie magic number
magic smoke mail storm mailbomb mailing list main loop mainframe mainsleaze
malware man page management mandelbug manged mangle mangled name mangler
manularity marching ants marbles marginal marginally marketroid Mars martian
massage math-out Matrix mav maximum Maytag mode McQuary limit meatspace
meatware meeces meg mega- megapenny MEGO meltdown, network meme meme plague
memetics memory farts memory leak memory smash menuitis mess-dos meta meta
bit metasyntactic variable MFTL mickey mickey mouse program micro- MicroDroid
microfortnight microLenat microReid microserf Microsloth Windows Microsoft
micros~1 middle-endian middle-out implementation milliLampson minor detail
MIPS misbug misfeature missile address MiSTing miswart MMF mobo moby
mockingbird mod mode mode bit modulo mojibake molly-guard Mongolian Hordes
technique monkey up monkey, scratch monstrosity monty Moof Moore's Law moria
MOTAS MOTOS MOTSS mouse ahead mouse belt mouse droppings mouse elbow mouse
pusher mouso MS-DOS mu MUD muddie mudhead muggle Multics multitask mumblage
mumble munch munching munching squares munchkin mundane mung munge Murphy's
Law music mutter N N nadger nagware nailed to the wall nailing jelly naive
naive user NAK NANA nano nano- nanoacre nanobot nanocomputer nanofortnight
nanotechnology narg nasal demons nastygram Nathan Hale nature neat hack neats
vs. scruffies neep-neep neophilia nerd nerd knob net.- net.god
net.personality net.police netburp netdead nethack netiquette netlag netnews
Netscrape netsplit netter network address network meltdown New Jersey New
Testament newbie newgroup wars newline NeWS newsfroup newsgroup nick nickle
night mode Nightmare File System NIL Ninety-Ninety Rule nipple mouse NMI
no-op noddy non-optimal solution nonlinear nontrivial not entirely unlike X
not ready for prime time notwork NP- NSA line eater NSP nude nugry nuke
number-crunching numbers NUXI problem nybble nyetwork O Ob- Obfuscated C
Contest obi-wan error Objectionable-C obscure octal forty off the trolley
off-by-one error offline ogg -oid old fart Old Testament on the gripping hand
one-banana problem one-line fix one-liner wars ooblick OP op open open source
open switch operating system operator headspace optical diff optical grep
optimism Oracle, the Orange Book oriental food orphan orphaned i-node
orthogonal OS OS/2 OSS OT OTOH out-of-band overclock overflow bit overrun
overrun screw owned P P.O.D. packet over air padded cell page in page out
pain in the net paper-net param PARC parent message parity errors Parkinson's
Law of Data parm parse Pascal PascalCasing pastie patch patch pumpkin patch
space path pathological payware PBD PD PDP-10 PDP-11 PDP-20 PEBKAC peek
pencil and paper Pentagram Pro Pentium peon percent-S perf perfect programmer
syndrome Perl person of no account pessimal pessimizing compiler peta- pffft
PFY phage phase phase of the moon phase-wrapping PHB phreaker phreaking pico-
pig-tail pilot error ping Ping O' Death ping storm pink contract pink wire
pipe pistol pixel sort pizza box plaid screen plain-ASCII Plan 9 plan file
platinum-iridium playpen playte plokta plonk plug-and-pray plugh plumbing PM
point release point-and-drool interface pointy hat pointy-haired poke poll
polygon pusher POM ponytail pop poser post postcardware Postel's Prescription
posting postmaster PostScript pound on power cycle power hit pr0n precedence
lossage pred prepend prestidigitization pretty pictures prettyprint pretzel
key priesthood prime time print printing discussion priority interrupt
profile progasm proggy proglet program Programmer's Cheer programming
programming fluid propeller head propeller key proprietary protocol
provocative maintenance prowler pseudo pseudoprime pseudosuit psychedelicware
psyton pubic directory puff pumpkin holder pumpking punched card punt Purple
Book purple wire push Python Q quad quadruple bucky quantifiers quantum
bogodynamics quarter ques quick-and-dirty quine Quirk objection quote chapter
and verse quotient quux qux QWERTY R rabbit job rain dance rainbow series
random Random Number God random numbers randomness rape rare mode raster
blaster raster burn rasterbation rat belt rat dance rathole ratio site rave
rave on! ravs raw mode RBL rc file RE read-only user README file real real
estate real hack real operating system Real Programmer Real Soon Now real
time real user Real World reality check reality-distortion field reaper
recompile the world rectangle slinger recursion recursive acronym red wire
regexp register dancing rehi reincarnation, cycle of reinvent the wheel relay
rape religion of CHI religious issues replicator reply restriction retcon
RETI retrocomputing return from the dead RFC RFE Right Thing rip ripoff RL
roach robocanceller robot robust rococo rogue room-temperature IQ root root
mode rootkit rot13 rotary debugger RSN RTBM RTFAQ RTFB RTFM RTFS RTI RTM RTS
rubber-hose cryptanalysis rude runes runic rusty iron rusty wire S S/N ratio
sacred saga sagan SAIL salescritter salt salt mines salt substrate same-day
service samizdat samurai sandbender sandbox sanity check Saturday-night
special say scag scanno scary devil monastery schroedinbug science-fiction
fandom SCNR scram switch scratch scratch monkey scream and die screaming tty
screen screen name screen scraping screw screwage scribble script kiddies
scrog scrool scrozzle scruffies SCSI SCSI voodoo search-and-destroy mode
second-system effect secondary damage security through obscurity SED see
figure 1 segfault seggie segment segmentation fault segv self-reference
selvage semi semi-automated semi-infinite senior bit September that never
ended server SEX sex changer shambolic link shar file sharchive Share and
enjoy! shareware sharing violation shebang shelfware shell shell out shift
left (or right) logical shim shitogram shotgun debugging shovelware
showstopper shriek Shub-Internet SIG sig block sig quote sig virus sigmonster
signal-to-noise ratio silicon silly walk silo since time T equals minus
infinity sitename skrog skulker slab slack slash slashdot effect sleep slim
slop slopsucker Slowlaris slurp slurp the robot smart smart terminal smash
case smash the stack smiley smoke smoke and mirrors smoke test smoking clover
smoot SMOP smurf SNAFU principle snail snail-mail snap snarf snarf & barf
snarf down snark sneaker sneakernet sniff snippage SO social engineering
social science number sock puppet sodium substrate soft boot softcopy
software bloat software hoarding software laser software rot softwarily softy
some random X sorcerer's apprentice mode source source of all good bits
space-cadet keyboard spaceship operator SPACEWAR spaghetti code spaghetti
inheritance spam spam bait spamblock spamhaus spamvertize spangle spawn
special-case speed of light speedometer spell spelling flame spider spider
food spiffy spike spin Spinning Pizza of Death spl splash screen splat splat
out splork! spod spoiler spoiler space sponge spoof spool spool file sporgery
sport death spungle spyware squirrelcide stack stack puke stale pointer bug
Stanford Bunny star out state stealth manager steam-powered steved STFW
stir-fried random stomp on Stone Age stone knives and bearskins stoppage
store STR strided stroke strudel stubroutine studly studlycaps stunning
stupid-sort Stupids Sturgeon's Law sucking mud sufficiently small suit
suitable win suitably small Sun sun lounge sun-stools sunspots super source
quench superloser superprogrammer superuser support surf Suzie COBOL swab
swap swap space swapped in swapped out Swiss-Army chainsaw swizzle sync
syntactic salt syntactic sugar sys-frog sysadmin sysape sysop system system
mangler systems jock T T tail recursion talk mode talker system TAN tanked
TANSTAAFL tape monkey tar and feather tarball tardegy taste tayste TCB TCP/IP
TECO tee teergrube teledildonics ten-finger interface tense tentacle tenured
graduate student tera- teraflop club terminak terminal brain death terminal
illness terminal junkie test TeX text thanks in advance That's not a bug,
that's a feature! the literature the network the X that can be Y is not the
true X theology theory thinko This can't happen This time, for sure! thrash
thread three-finger salute throwaway account thud thumb thundering herd
problem thunk tick tick-list features tickle a bug tiger team time bomb time
sink time T times-or-divided-by timesharing TINC Tinkerbell program TINLC tip
of the ice-cube tired iron tits on a keyboard TLA TMRC TMRCie TMTOWTDI to a
first approximation to a zeroth approximation toad toast toaster toeprint
TOFU toggle tool toolchain toolsmith toor top-post topic drift topic group
TOPS-10 TOPS-20 TOS tourist tourist information touristic toy toy language
toy problem toy program trampoline trap trap door trash trawl tree-killer
treeware trit trivial troff troglodyte troglodyte mode Trojan horse troll
Troll-O-Meter tron troughie true-hacker tty tube tube time tumbler tunafish
tune turbo nerd Turing tar-pit turist Tux tweak TWENEX twiddle twilight zone
twink twirling baton two pi two-to-the-N tyop U u- UBD UBE ubergeek UCE UDP
UN*X undefined external reference under the hood undocumented feature
uninteresting Unix Unix brain damage Unix conspiracy Unix weenie unixism
unswizzle unwind the stack unwind-protect up upload upstream upthread uptime
urchin URL Usenet Usenet Death Penalty user user-friendly user-obsequious
userland Utah teapot, the UTSL UUOC V V7 vadding vanilla vanity domain
vannevar vaporware var vaston VAX VAXen vaxocentrism vdiff veeblefester
velveeta Venus flytrap verbage verbiage Version 7 vgrep vi video toaster
videotex virgin virtual virtual beer virtual Friday virtual reality virtual
shredder virus visionary Visual Fred VMS voice voice-net voodoo programming
VR Vulcan nerve pinch vulture capitalist W w00t wabbit WAITS waldo walk walk
off the end of walking drives wall wall follower wall time wall wart wallhack
wango wank wannabee war dialer war-driving war-chalking -ware warez warez
d00dz warez kiddies warlording warm boot wart washing machine washing
software water MIPS wave a dead chicken weasel web pointer web ring web
toaster webify webmaster wedged wedgie wedgitude weeble weeds weenie Weenix
well-behaved well-connected wetware whack whack-a-mole whacker whales What's
a spline? wheel wheel bit wheel of reincarnation wheel wars white hat
whitelist whizzy Whorfian mind-lock wibble WIBNI widget wiggles wild side
WIMP environment win win big win win Winchester windoid window shopping
Windowsitis Windoze winged comments winkey winnage winner winnitude Wintel
Wintendo wired wirehead wirewater wish list within delta of within epsilon of
wizard Wizard Book wizard hat wizard mode wizardly wok-on-the-wall womb box
WOMBAT womble wonky workaround working as designed worm wormhole wound around
the axle wrap around write-only code write-only language write-only memory
Wrong Thing wugga wugga wumpus WYSIAYG WYSIWYG X X XEROX PARC XOFF XON xor
xref XXX xyzzy Y YA- YABA YAFIYGI yak shaving YAUN yellow card yellow wire
Yet Another YHBT YKYBHTLW YMMV You are not expected to understand this You
know you've been hacking too long when Your mileage may vary Yow! yoyo mode
Yu-Shiang Whole Fish Z zap zapped Zawinski's Law zbeba zen zero zero-content
Zero-One-Infinity Rule zeroth zigamorph zip zipperhead zombie zorch Zork
zorkmid 0 (TM) /dev/null /me 0 1TBS 2 404 404 compliant @-party :(TM): //
[Usenet] ASCII rendition of the (TM) appended to phrases that the author
feels should be recorded for posterity, perhaps in future editions of this
lexicon. Sometimes used ironically as a form of protest against the recent
spate of software and algorithm patents and look and feel lawsuits. see also
{UN*X}.